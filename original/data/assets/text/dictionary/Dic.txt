game.battle.Messages: {
	underSiege: "Settlement under siege!",
	underSiegeC: "Capitol under siege!",
	underSiegeD: "{0} is under siege by {1} forces. It will hold out for as long as it can, but reinforcements should be dispatched immediately.",
	show: "Show",
	lost: "Settlement lost!",
	lostC: "Region of {0} has fallen to our enemies.",
	factionDestroyed: "Faction Destroyed!",
	factionDestroyedD: "The faction of {0} is no more.",
	factionMove: "Capitol Relocated",
	factionMoveD: "The faction of {0} has moved its capitol. Its people still resist.",
},
game.battle.PromptBesige: {
	Time: "Time Besieged:",
	TimeD: "The longer you hold the siege, the weaker the garrison will become.",
	Wait: "Wait",
	WaitD: "Wait and continue the siege. the enemy will weaken the longer you wait until they surrender.",
},
game.battle.PromptConquer: {
	Title: "Region Conquered",
	surrenderD: "Region of {0} has surrendered and opened their gates. Its people trust you will be lenient. What will you do with them?",
	victoryD: "Region of {0} is ours. What will do with it?",
	Mercy: "Mercy",
	MercyD: "Show mercy. Neither plunder, death nor slaves will be had, but the region will be in your debt.",
	Sack: "Sack",
	SackD: "Let your men have their way, resulting in spoils and prisoners, but the region will despise you for it.",
	annihilateD: "Spare none, leave no stone unturned and teach this settlement a lesson that will be remembered for generations.",
	OccupyD: "Occupy this settlement and incorporate it into your realm",
	LiberateD: "Liberate this settlement. It will turn to, or remain, a rebel settlement",
},
game.battle.PromptResult: {
	victoryD: "The gods have smiled upon your name. Victory is ours and our foe has been beaten.",
	DefeatD: "A dark day in the annals. The enemy has snatched victory through deceit and low cunning. We must call in new armies to deal with this pathetic beggar.",
	RetreatD: "Our army has retreated to fight another day.",
	RetreatDefeat: "Our army attempted to retreat, but was destroyed in the process.",
},
game.events.EventDisease: {
	title: "Outbreak!",
	desc: "Dreadful news! A case of {0} has been discovered. Let us hope it doesn't spread.",
},
game.events.EventRaider: {
	protection: "Protection?",
	pay: "Pay Up",
	protectionD: "Hello friend. We are a band of noble people, keeping the peace in the region of {0}. As you know, there are evil forces out in the world, bent on destruction and conquest. We however, are lovers of peace, and would like to offer our protective services. But soldiers have to eat, so we kindly ask you to ship us {1} {2} and lets say 10% of your goods in order for us to keep the peace. It's quite the bargain. We await your reply and looking forward to hearing from you within 4 days.",
	proInfo: "Our scouts report these people have a force somewhere around {0} soldiers with {1}% training and {2}% equipment",
	Rebels: "Rebels!",
	HasSpawned: "The Rebel army has spawned in the region of {0}. Deal with them before they have time to equip themselves!",
	protectionFail: "Hello again, you must have forgot to pay. Very unwise. Never mind, we will now have to come and collect what is owed ourselves. I will see you soon.",
	Rebellion: "This region has had enough of your mistreatment and have declared independency from your tyrannical rule.",
	Chance: "Raid Chance",
	ChanceD: "The chances of getting raided yearly. Raids spawn from a neighbouring rebel region. If there are none, chances will be low. This chance goes up with your population, riches, and size of your kingdom. It goes down by with your garrison size and victories, although when they occur, they will be better equipped and trained to take you on. Raiders can be payed off to avoid a confrontation.",
},
game.events.EventRiot: {
	riot: "Riot!",
	emigration: "Emigrants!",
	emigrationD: "A group of {0} have decided to leave your city, renouncing their citizenship, and your rule. This is a sign of weakness. Make sure you increase loyalty so that this will not happen again!",
	loyaltyWarning: "wavering loyalty",
	loyaltyWarningD: "Loyalty is decreasing. It is of utmost importance that you tend to your subjects needs. Check the citizen tab upper-left to see what can be done to increase happiness, and don't invite more immigrants to join until you have it under control.",
	riotWarning: "Ungrateful plebs!",
	riotWarningD: "Rumour has it that your citizens are grinding their teeth in frustration over what they claim is your incompetent rule. If nothing is done in time, a riot might follow! Try to increase their loyalty immediately.",
	riotD: "Your subjects have had enough of you and your rule. They have risen up, determined to show their displeasure by murdering and vandalizing. The only way to quell these rebels is by calling in the military. Guards will also do their fair share. Riots will also subdue naturally without action.",
	amount: "We have reports of {0} rioters. The following species have joined: ",
	success: "The rioters have had a taste of your might and have laid down their arms. The ring leaders will be processed in your justice system and be made an example of.",
	Over: "Riot Over!",
	OverD: "The rioters have had enough of murdering and pillaging for now. They have returned to be law abiding citizens, until they feel it's time again.",
},
game.events.EventSlaver: {
	Slaver: "Slaver!",
	Question: "A slaver has arrived and is offering his goods. Would you like to make a purchase or a sale? He will stay for 4 days to await your payments.",
	Purchase: "Purchase",
	Expired: "Expired",
},
game.events.EventUprising: {
	warning: "Slave Warning!",
	warningD: "Rumour has it that our wretched slaves feel mistreated. Some battlegear has also mysteriously gone missing. Might be a good time to deploy our troops close to the throne, just in case they think of something...",
	riot: "Slave Uprising!",
	riotD: "May the gods help us, the slaves are rising up to their masters! They claim to have had enough of your mistreatment and are now bent on ending your rule. Should they reach the throne, they will part with a good chunk of our riches and resources, and we shall be forever disgraced. Call in the troops and smite them, while there still is time!",
	amount: "{0} slaves have joined the uprising.",
	OverD: "The slave uprising has been defeated and your people rejoice at your might. Time to acquire new ones.",
	Over: "Uprising crushed!",
	LooseD: "The filthy slaves have captured the throne through low cunning. The wretches have plundered our stores and out treasury before deserting their master. May the gods help us through this winter.",
	Loose: "Slaves triumph!",
},
game.faction.FBanner: {
	name: "Banner",
},
game.faction.FCredits: {
	Treasury: "Treasury",
	TreasuryD: "The amount of Denarii at disposal.",
	InExported: "Exported",
	InExportedD: "Moneys earned from exports.",
	OutImported: "Imported",
	OutImportedD: "Moneys spent on imports.",
	Trade: "Trade",
	TradeD: "Profits / losses due to trade.",
	Inflation: "Inflation",
	InflationD: "Inflation is applied to positive and negative treasuries. Each year a negative treasury will have 10% of its debt removed. A positive treasury will have 10% removed.",
	Purchases: "Purchases",
	PurchasesD: "Special purchases/sales such as from the slave trader.",
	Tribute: "Tribute",
	TributeD: "Denari spent/gained from paying off other armies and factions.",
},
game.faction.FResources: {
	In: "in",
	InDesc: "Yearly amount gained",
	InImported: "Imported",
	InImportedD: "How much gained through imports.",
	InTaxes: "Taxes",
	InTaxesD: "How much gained through taxed regions.",
	Out: "Out",
	OutDesc: "Yearly amount lost.",
	OutExported: "Exported",
	OutExportedD: "How much loss through exports.",
	OutTribute: "Tribute",
	OutTributeD: "How much loss through paying tribute to warlords or other factions.",
},
game.faction.player.PCredits: {
	Sell-Price: "Sell-Price",
	sellPriceD: "What price the highest bidder buys a ware for.",
	Buy-Price: "Buy-Price",
	buyPriceD: "The lowest price at which a faction will sell this ware.",
	MercenaryD: "Mercenaries can be conscripted into your armies and cost credits to upkeep each day.",
},
game.faction.player.PLaw: {
	Crimes: "Crimes",
	crimesD: "Crimes Committed",
	Crime Rate: "Crime Rate",
	Crime-RateD: "The probability at which each day, 1 in 50 citizens will commit a crime. It is determined by population count, the criminality property of species, bonuses, happiness and most notably law. Smaller populations, higher happiness and higher law will lower this rate.",
	Arrests: "Arrests",
	Arrested: "Arrested",
	arrestsD: "The crimes that have lead to an arrest. If a crime is committed near a manned Guardpost, it will most likely lead to an arrest.",
	Judged: "Judged",
	Judgement: "Judgement",
	JudgedD: "Arrested criminals that have been processed in a court.",
	Punished: "Punished",
	Punishment: "Punishment",
	PunishedD: "Arrested criminals that have received punishment.",
	Executed: "Executed",
	Executions: "Executions",
	ExecutedD: "Punished criminals that have been sent to the gallows. Your execution rate deters crime significantly by increasing law. It impacts your mercy value however.",
	Imprisoned: "Imprisoned",
	Imprisonment: "Imprisonment",
	ImprisonedD: "Punished prisoners that have been sent to prison. Imprisoned criminals spend 1-5 years in prison and once they're released, they'll join your workforce again.",
	Enslaved: "Enslaved",
	Enslavement: "Enslavement",
	EnslavedD: "Punished prisoners that have been turned into slaves. Slaves are slaves for life and can be used as workers. Be careful not to mistreat your slaves.",
	ExecutionT: "Executions",
	ExecutionsDesc: "Determines how many prisoners that will be sent to the gallows. Increases law more than prisons, but can affect happiness.",
	EnslaveT: "Enslavement",
	EnslaveDesc: "Determines how many prisoners that will be sent to the slavers to be turned into slaves.",
	Banish: "Banish",
	BanishD: "Instead of imprisoning and punishing this species when arrested, it will be banished and go into exile. Applies to already imprisoned subjects. Banished subjects lowers law.",
	Prosecute: "Prosecute",
	ProsecuteD: "Have your guards arrest all subjects of this species, not only the criminals. Will cause a complete drop in happiness",
	Law: "Law",
	LawDesc: "To increase law, crimes must be dealt with through law facilities. The effectiveness of your facilities make up your law value, which in turn deters crime. The law value increased slowly, but is based on: Arrests x (0.5 + 0.2 x Judgement + 0.3 x (Punishment x (1.0 + Executions)))",
},
game.faction.player.PLevels: {
	mTitle: "New level unlocked!",
	mMessage: "A new level has been bestowed upon your name!",
	UnlocksByTech: "Unlocks with level:",
	PopReq: "Citizens required: ",
	Level: "Level",
	Desc: "As you grow in might and population, titles will be bestowed upon your name. Levels will unlock great advantages to a ruler.",
},
game.faction.player.PResources: {
	Tribute: "Tribute",
	TributeD: "How much gained through payment of other factions.",
	demolition: "demolition",
	demoDesc: "The amount spent gained by demolishing structures.",
	Produced: "Produced",
	ProducedD: "How much gained through production, mining and extraction.",
	Military: "Military",
	MilitaryD: "Resources gained from conquest, or army supplies sent back.",
	maintenance: "maintenance",
	maintDesc: "The amount spent on maintenance.",
	household: "household",
	householdDesc: "The amount spent on housing and housing upkeep.",
	construction: "construction",
	constructionDesc: "The amount spent on construction.",
	spoilage: "spoilage",
	spoilageDesc: "The amount lost due to spoilage.",
	Theft: "Theft",
	TheftDesc: "The amount lost due to theft by your criminals.",
	Consumed: "Consumed",
	ConsumedD: "How much loss through consumption.",
	OutMilitaryD: "Resources spent on supplying the army.",
	Sacrificed: "Sacrificed",
	SacrificedD: "Resources sacrificed to the gods.",
},
game.faction.player.PTech: {
	low: "Knowledge low",
	lowBody: "There is not enough knowledge to maintain our current technologies. As a result, all bonuses from technologies are receiving a big penalty, and unlocked rooms are now locked. Make sure your knowledge producing facilities are fully operational, or build more of them.",
	UnlocksByTech: "Unlocks with technology:",
	LockedByDefecit: "Locked until knowledge is restored.",
	Technology: "Technology",
	desc: "Technologies can be obtained by spending tech points.",
	Allocated: "Allocated",
	AllocatedD: "Knowledge that has been allocated into technologies",
	Frozen: "Frozen",
	FrozenD: "Frozen knowledge comes from recently disabled technologies. This knowledge will slowly become available with time.",
	Available: "Available",
	AvailableD: "Knowledge that is available to be spent on technologies.",
	Penalty: "Penalty",
	PenaltyD: "When your allocated knowledge exceeds your total knowledge, technologies drastically become less efficient. Either increase your knowledge pool, or disable technologies to steer clear of doom.",
},
game.faction.player.PTitles: {
	Titles: "Titles",
	TitlesD: "Titles are unlocked by various achievements. At the start of each game, you may choose 5 of these unlocked titles to be associated with your name and boost your kingdom in various ways.",
},
game.faction.player.PTribute: {
	Tribute: "Yearly Tribute",
	TributeIn: "Our yearly tribute from our vassals has arrived!",
	TributeOut: "Our yearly tribute has been deducted from our treasury and payed to our overlord.",
},
game.GAME: {
	loading: "loading",
},
game.GameBuild: {
	version: "Version miss-match! Save is made with major game version: {0}. Try downgrading the game to this version. The current game version is: ",
	race: "The amount of races do not match the current configuration.",
	room: "The amount of rooms do not match the current configuration.",
	industries: "The amount of industries do not match the current configuration.",
	resources: "The amount of resources do not match the current configuration.",
	modOther: "The save can not be loaded as it was made with another mod configuration:",
	modNone: "The save can not be loaded as it was made with an un-modified game. Disable all mods in the launcher to load the game.",
	mod2: "Try to enable the same mods, in the same order, in the launcher and reload the save.",
	underlaying: "UnderLaying problem:",
},
game.GameConRandom: {
	small: "small",
	big: "big",
	huge: "huge",
	nort: "northern",
	south: "southern",
	central: "central",
	startRace: "starting race",
	size: "size",
	latitude: "latitude",
	raids: "raids",
},
game.nobility.NOBILITIES: {
	title: "Nobility passed!",
	mess: "It is a sad day. Our {0} passed today. His position is now vacant and in need of filling.",
},
game.statistics.G_REQ: {
	AllTime: "(all time)",
	AllTimeH: "(all time high)",
},
game.time.TIME: {
	timeFormat: "Day {0} of {1} of year {2} of the {3}",
	Time: "time: ",
	Ago: "{0} years, {1} days ago",
	Until: "{0} years, {1} days",
},
init.biomes.CLIMATES: {
	Cold: "Cold",
	cold_desc: "Very cold winters. Unique crops. Low disease rates.",
	Temperate: "Temperate",
	temp_desc: "Varying temperature.",
	Warm: "Warm",
	warm_desc: "Hot summers.",
	Climate: "Climate",
	desc: "Climate zones have a range of bonuses and drawbacks. They also have different base temperatures, which can lead to exposure and death for your subjects depending on their natural resilience to hot and cold.",
},
init.biomes.TERRAINS: {
	Terrain: "Terrain",
	Ocean: "Ocean",
	OceanD: "Salt water such as oceans. Good for trade.",
	Sweet: "Sweet water",
	SweetD: "Sweet water such as river beds or lakes. Often high fertility ground.",
	Mountain: "Mountain",
	MountainD: "Barren, but rich in mineral deposits.",
	Forest: "Forest",
	ForestD: "Forested areas. Good for lumber.",
	OpenLand: "Open Land",
	Open Land: "",
},
init.boostable.BoostableCollection: {
	Rooms: "Rooms",
	Desc: "Production speed of: {0}",
},
init.boostable.BOOSTABLES: {
	Bonus: "Bonus",
	Bonuses: "Bonuses",
	desc: "Bonuses boosts certain areas of the game.",
	Physics: "Physics",
	Battle: "Battle",
	Behaviour: "Behaviour",
	Rates: "Rates",
	Start: "Start",
	Civic: "Civic",
},
init.race.RaceBoosts: {
	name: "Race Work Skill",
	desc: "Species have different talents in different professions. The higher the work skill, the more production.",
},
init.race.RacePopulation: {
	reproductionRate: "Reproduction Rate",
	reproductionRateD: "The rate at which a species reproduces.",
	rarity: "Rarity",
	rarityD: "How rare this species is in Syx.",
},
init.race.RACES: {
	name: "Species",
},
init.resources.Minable: {
	minable: "{0} Deposits",
},
init.settings.S: {
	some: "some",
	lots: "lots",
	Shadow: "Shadow",
	ShadowD: "The amount of shadows in-game. Can decrease performance.",
	Particles: "Particles",
	ParticlesD: "The amount of particles in-game. Can decrease performance.",
	Gore: "Gore",
	GoreD: "The amount of gore in-game. Can decrease performance.",
	Music: "Music",
	MusicD: "The music volume",
	Sound: "Sound",
	SoundD: "The sound effects volume",
	Mute-Un-focused: "Mute-Un-focused",
	Mute-UnfocusedD: "Will mute the game when game is un-focused",
	Night-Gamma: "Night-Gamma",
	Night-GammaD: "The brightness of nights in the game.",
	{0} min: "{0} min",
	Auto-Saving: "Auto-Saving",
	Auto-SavingD: "How often the game will auto-save.",
	Auto-Save-Files: "Auto-Save-Files",
	Auto-Save-FilesD: "How many auto save files that will be kept.",
	Edge-Scrolling: "Edge-Scrolling",
	Edge-ScrollingD: "Scroll maps by touching the edges.",
},
init.tech.TECHS: {
	name: "Technology",
	desc: "Technologies unlocks various boosts and rooms",
},
settlement.army.ArmyMorale: {
	numbers: "Numbers",
	numbersD: "The size of your army compared to the size of the enemy",
},
settlement.army.DivMorale: {
	BaseD: "Base Morale of your division. Increased by race, training and other factors",
	ArmyD: "Base Morale of your army. Affected by being outnumbered, and by being ill supplied",
	CasultiesD: "The amount of soldiers that have been killed recently. Will go down slowly with time after a battle.",
	Routing: "Routing",
	RoutingD: "Once soldiers begin to desert in a division, others will as well",
	FormationD: "The integrity of the formation the division is currently in.",
	ProjectilesD: "The amount of fire sustained recently.",
	Flanks: "Flanks",
	FlanksD: "Attacks made on the flanks of a division can decrease morale",
	Situation: "Situation",
	The proximity, and amount of enemy troops and their quality.: "The proximity, and amount of enemy troops and their quality.",
},
settlement.entity.animal.Animal: {
	Cub: "Cub",
	domestcated: "(Domesticated)",
},
settlement.entity.humanoid.ai.battle.ManPlan: {
	Name: "Manning defenses",
},
settlement.entity.humanoid.ai.battle.MarchPlan: {
	Reforming: "Reforming",
	Waiting: "Waiting for orders",
	Breaking: "Breaking Formation",
	Firing: "Firing",
},
settlement.entity.humanoid.ai.battle.PlanAttackTile: {
	name: "attacking terrain",
},
settlement.entity.humanoid.ai.crime.Disrespect: {
	verb: "Disrespecting Ruler",
},
settlement.entity.humanoid.ai.crime.Flasher: {
	verb: "Streaking",
},
settlement.entity.humanoid.ai.crime.Murder: {
	verb: "Murdering",
},
settlement.entity.humanoid.ai.crime.Theft: {
	Thieving: "Thieving",
},
settlement.entity.humanoid.ai.crime.Vandalism: {
	name: "Vandalizing",
},
settlement.entity.humanoid.ai.health.PlanInjured: {
	name: "Bleeding out",
},
settlement.entity.humanoid.ai.health.PlanSick: {
	name: "Being sick",
},
settlement.entity.humanoid.ai.idle.AIModule_Idle: {
	name: "Biding Time",
},
settlement.entity.humanoid.ai.idle.Inter: {
	MoveAway: "making way",
},
settlement.entity.humanoid.ai.idle.PlanInterract: {
	name: "Hanging out with {0}",
	nameMeet: "Meeting up with {0}",
	fighting: "Fighting {0}",
	knockedOut: "Knocked out",
},
settlement.entity.humanoid.ai.main.AIEventListeners: {
	Catching-Criminal: "Catching Criminal",
	Fleeing: "Fleeing",
	Stopping: "Stopping",
	Confused: "Confused",
	Out-of-breath: "Out-of-breath",
	criminal: "Handling Criminal",
	tackled: "tackled",
},
settlement.entity.humanoid.ai.main.AIPlanResourceMany: {
	fetch: "Fetching Resources",
},
settlement.entity.humanoid.ai.main.AIPlans: {
	swimming: "Swimming",
	trapped: "Cut off from the throne",
	skinnydipping: "Skinny dipping",
	WalkingToCentre: "Walking to the center of the city",
	Fleeing: "Fleeing",
},
settlement.entity.humanoid.ai.needs.AIModule_Drink: {
	Drinking: "Drinking",
	intoxicated: "intoxicated",
	sobering: "Sobering Up",
},
settlement.entity.humanoid.ai.needs.AIModule_Home: {
	name: "relaxing",
},
settlement.entity.humanoid.ai.subject.AIModule_Subject: {
	mourning: "Mourning old friend",
	execution: "Watching an execution",
	trial: "Watching an Trial",
	swearing: "Swearing fealty",
},
settlement.entity.humanoid.ai.subject.PlanEmmigrate: {
	name: "Fed up with this dump and your failing rule.",
},
settlement.entity.humanoid.ai.subject.PlanJoinArmy: {
	Leaving: "Leaving for the Army",
},
settlement.entity.humanoid.ai.types.child.AIModule_Child: {
	play: "Playing",
	sleep: "Sleeping",
	Homeless: "Homeless",
	Studying: "Studying",
	WarmingUp: "Staying indoors",
},
settlement.entity.humanoid.ai.types.insane.AIModule_Insane: {
	treatment: "In Treatment",
	insane: "Being Insane",
},
settlement.entity.humanoid.ai.types.prisoner.AIModule_Prisoner: {
	Exile: "Going into Exile",
},
settlement.entity.humanoid.ai.types.prisoner.Arena: {
	name: "Fighting in the Arena",
},
settlement.entity.humanoid.ai.types.prisoner.Enslaved: {
	name: "Being Enslaved",
},
settlement.entity.humanoid.ai.types.prisoner.Executed: {
	name: "Being Executed",
},
settlement.entity.humanoid.ai.types.prisoner.Judged: {
	name: "Being Judged",
},
settlement.entity.humanoid.ai.types.prisoner.Prison: {
	name: "Biding Time",
},
settlement.entity.humanoid.ai.types.prisoner.Temple: {
	name: "Being Sacrificed",
},
settlement.entity.humanoid.ai.types.recruit.PlanRange: {
	Training: "Training",
},
settlement.entity.humanoid.ai.types.rioter.AIModule_Rioter: {
	verb: "Rioting",
},
settlement.entity.humanoid.ai.types.slave.PlanUprise: {
	verb: "Minding own business!",
},
settlement.entity.humanoid.ai.types.student.Plan: {
	study: "studying",
},
settlement.entity.humanoid.ai.work.PlanHangArround: {
	wait: "Waiting for work",
},
settlement.entity.humanoid.ai.work.WorkAbs: {
	walk: "walking to job",
	storing: "storing resource",
},
settlement.entity.humanoid.ai.work.WorkHunter: {
	Stalking: "Stalking prey",
	Butchering: "Butchering",
	Buthering2: "butchering prey",
	Back: "dragging back",
	failed: "failed to catch prey",
},
settlement.entity.humanoid.HCLASS: {
	Noble: "Noble",
	Nobility: "Nobility",
	NobilityD: "The Nobility are the top social layer of your kingdom. They do not work traditionally and demand a salary amongst high tier services. The rewards for having nobles around can be great however.",
	Citizen: "Citizen",
	Citizens: "Citizens",
	CitizenD: "Citizens are the bulk of your population and will carry out your wishes.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but asks for very little in return. Slaves are gained through winning battles, or punishing criminals. They do not reproduce. If you mistreat slaves, and they feel that they have the upper hand in numbers, they may revolt, take the throne and leave with a bunch of goods.",
	Child: "Child",
	Children: "Children",
	ChildD: "Children are to-be citizens. They require food and protection from a manned nursery and can be educated in a school. They will sometimes run around causing mischief.",
},
settlement.entity.humanoid.HTYPE: {
	Subject: "Subject",
	Subjects: "Subjects",
	SubjectD: "Subjects are the bulk of your population and will carry out your wishes.",
	Retiree: "Retiree",
	Retirees: "Retirees",
	RetireeD: "Retired people have served you for many years and are now entitled to some relaxation their final years. They do not work.",
	Recruit: "Recruit",
	Recruits: "Recruits",
	RecruitD: "Recruits are either training their combat skills for a place in a division, or honing these skills towards the limit you've set for said division.",
	Student: "Student",
	Students: "Students",
	StudentD: "Students are citizens currently attending university. They do not count towards your workforce.",
	Prisoner: "Prisoner",
	Prisoners: "Prisoners",
	PrisonerD: "Prisoners are caught criminals, or POWs. Prisoners will spend their time in your dungeons. They can be used as sacrifices in temples, or gladiators. They can also be enslaved, or executed.",
	Soldier: "Soldier",
	Soldiers: "Soldiers",
	SoldierD: "Soldiers are men on the battlefield.",
	Enemy: "Enemy",
	Enemies: "Enemies",
	EnemyD: "Enemies are hostile peoples, bend on destroying your rule",
	Rioter: "Rioter",
	Rioters: "Rioters",
	RioterD: "Rioters are former citizens, who have had enough of your rule and express their disappointment by burning your city to ashes.",
	Deranged: "Deranged",
	Derangeds: "Deranged",
	DerangedD: "Deranged are people who have gone insane. They will do no work, and wander around your city doing erratic things. Can be cured in an asylum.",
	Nobility: "Nobility",
	Nobles: "Nobles",
	NobilityD: "The nobility are above the common plebs. Do not work in a traditional sense and require the best of services.",
	Slave: "Slave",
	Slaves: "Slaves",
	SlaveD: "Slaves do mundane and hard work, but asks for very little in return. They can not be trained into soldiers, or be educated. Slaves are gained through winning battles, or punishing criminals. They have little to no reproduction rate. If you mistreat slaves, and they feel that they have the upper hand in numbers, they may revolt (just leave your settlement for now)",
	Child: "Child",
	Children: "Children",
	ChildD: "Children require staffed nurseries to grow up to become subjects. Children can be educated by schools.",
},
settlement.entry.Immigration: {
	immigrants: "Immigrants",
	camp: "Havens Max",
	immigrantD: "Immigrants are subjects from either your regional population, or camps that have joined your cause. These subjects will be attracted by your current happiness. Happiness above 80% will attract immigrants at an increasing rate.",
	admitted: "Admitted",
},
settlement.entry.SENTRY: {
	open: "Capitol Open!",
	openD: "Your capitol is now open for immigrants and trade.",
	closed: "Capitol Closed!",
	closedD: "Your capitol is unreachable. There is no clear path from the edge of your city map to your Throne. As a consequence, no immigration or trade can happen. Enemies can't attack you either, but will keep besieging you indefinitely. If not done deliberately, clear a path to an edge of the map as soon as possible.",
},
settlement.environment.SettSquareness: {
	Organic: "Organic",
	Square: "Square",
	Shape: "Shape",
	desc: "Depending on species, subjects prefer different shapes to your rooms. Some like it square, others more organic.",
},
settlement.environment.SettTemp: {
	format: "~",
	Temperature: "Temperature",
	desc: "Temperature is determined by climate, season and chance. Extreme temperatures on either end causes your subjects to be exposed and can lead to death. Hearths warms subjects. Skinny dipping in natural bodies of water cools subjects. Clothes help greatly with both warmth and cold.",
},
settlement.invasion.Text: {
	invasion: "Invasion!",
	invasionD: "An enemy host of {0} men have been seen gathering {1} of the city, preparing an assault. Muster your forces and fight them. If they reach the throne, it is all over.",
	Bombardment: "Bombardment",
	BombardmentD: "The enemy has started bombarding us to clear a path. There is nothing we can do but take cover until they are done.",
	Deployment: "Deployment",
	DeploymentD: "The enemy are deploying their troops. May the gods help us!",
	Retreat: "Retreat!",
	RetreatD: "Enemy forces are weary of fighting and have retreated!",
	LooseD: "Enemy forces have reached the throne, and taken control of the city. They have sacked your treasury for {0} {1}, and collected {2}% of your warehouse stock.",
	LooseDFaction: "You are now a puppet state of the {0} kingdom, and must pay them an annual fee of 25% of your treasury.",
	Victory: "Our men have prevailed and our foe is beaten. Rejoice! The {0} survivors can be turned into prisoners, and needs a prison to stay in. Do you accept them? Declining will have the remaining enemies chased down and killed.",
},
settlement.job.Job: {
	claimed: "Is Claimed",
	claimedNot: "Is Unclaimed",
	resources: "This job needs a resource that is unobtainable in your city before it can be performed",
	dormant: "Job is inactive and needs to be manually activated before it will be performed.",
	blocked: "An adjacent job is blocking this job and must be performed prior to this.",
	unreachable: "Job is unreachable from the throne and will not be performed.",
},
settlement.job.JobBuildFence: {
	desc: "Stops subjects and animals from wandering off where you don't want them. Does not stop enemies",
},
settlement.job.JobBuildFillCave: {
	name: "Refill Mountain Cave",
	desc: "Refills dug tunnels or natural mountain caves",
},
settlement.job.JobBuildFort: {
	dStairs: "Stairs are used for getting access to the top of fortifications. Should be placed adjacent to one.",
},
settlement.job.JobBuildRoad: {
	Convert: "Convert",
	ConvertD: "Convert existing roads into this type.",
},
settlement.job.JobBuildStructure: {
	WallD: "Walls can be used to fence off areas.",
	CeilingD: "Ceilings can house rooms inside them, and protects subjects from the elements.",
	Structure: "{0} Room.",
	StructureD: "A combination tool that makes ceilings surrounded by walls of chosen material.",
	Convert: "Convert",
	ConvertD: "Convert existing structures into this type.",
	SameProblem: "Must be placed on a structure of a different type.",
	Blocked: "Area is blocked and can't be worked.",
	Rooms: "The ceiling of rooms must be changed by refurnishing the room.",
},
settlement.job.JobClears: {
	harvestDesc: "This job is dormant since there currently isn't enough growth to harvest anything. The job will become active once growth occurs.",
	Stone: "Clear Rock",
	StoneD: "Removes rocks on the map. Yields the resource stone",
	StoneV: "Clearing rocks",
	Tree: "Fell Tree",
	TreeD: "Removes trees and yields wood. Trees will slowly grow back in time.",
	TreeV: "Chopping lumber",
	Food: "Harvest wild edibles",
	FoodD: "Placed on edible vegetation. These grow with each year.",
	FoodV: "Gathering",
	Water: "Remove Water",
	WaterD: "Removes shallow water...",
	WaterV: "Removing water",
	Canal: "Dig Canal",
	CanalD: "Dig a canal. Can only be placed if you have water-table for it.",
	Water-table: "Water-table: ",
	Tunnel: "Dig Into Mountain",
	TunnelD: "Digs a tunnel into the mountain",
	TunnelV: "Tunnels into the mountain",
	Clear: "Clear All",
	ClearD: "Clears stone and wood",
	Structure: "Dismantle Structure",
	StructureD: "Removes structures (fortifications, walls, roofs and roads)",
	StructureV: "Demolishing structure",
},
settlement.job.Placer: {
	overwrite: "Overwrite",
	overdesc: "Overwrites other jobs or structures when placed.",
},
settlement.job.PlacerActivate: {
	name: "Activate Job",
	desc: "Activates suspended jobs.",
},
settlement.job.PlacerDelete: {
	name: "Delete Jobs",
	desc: "Deletes all jobs and room plans",
},
settlement.job.PlacerDormant: {
	name: "Suspend Jobs",
	desc: "Suspended jobs will not be performed. Useful for planning out your city and controlling which areas will be worked first.",
},
settlement.job.PlacerRemoveAll: {
	remove: "Remove",
	desc: "Removes structures and rooms",
},
settlement.job.PlacerRemoveSmart: {
	remove: "Smart Remove",
	desc: "Removes jobs if any selected, else removes structures and rooms.",
},
settlement.job.PlacerRepair: {
	name: "Repair",
	desc: "Repair damaged structures and rooms",
},
settlement.main.SETT: {
	Generating: "Generating",
	Initializing: "Initializing",
},
settlement.main.SettOverlay: {
	Deposits: "Deposits",
	DepositsD: "Highlights deposits that can be mined",
	Maintenance: "Maintenance",
	MaintenanceD: "Highlights what tiles need maintenance",
	Harvestable: "Harvestable",
	HarverstableD: "Highlights wild growing things that can be harvested.",
	Path-Usage: "Path-Usage",
	Path-UsageD: "Highlights the tiles your subjects use when moving.",
	Fertility: "Fertility",
	FertilityD: "Highlights base ground fertility",
	Homeless: "Homeless",
	HomelessD: "Highlights homeless workplaces and homeless oddjobbers",
},
settlement.room.food.farm.Gui: {
	cycle: "Cycle",
	tilling: "Tilling",
	tending: "Tending",
	harvest: "Harvesting",
	skill: "Skill",
	daily: "Daily Progress",
	irrigation: "Irrigation",
	irrigationDesc: "Irrigation is gained by having water tiles close to the farm. It can boost production by 10%",
	reseed: "reseed",
	reseedD: "Reseed the farm with another crop. New farm must still be constructed.",
},
settlement.room.food.farm.ROOM_FARM: {
	Irrigation: "Irrigation",
	irrigationDesc: "Irrigation is gained from being close to water. Irrigation can boost a farm by up to 10%",
},
settlement.room.food.fish.Constructor: {
	problem: "Must not be placed on water",
	problem2: "Shape must contain more water tiles in order to function",
},
settlement.room.food.pasture.Constructor: {
	Problem: "Must be facing the edge of the room.",
	Problem2: "Must not be placed in a corner.",
},
settlement.room.food.pasture.Gui: {
	Animals: "Animals",
	DailyWork: "Daily Tending",
	DailyWorkD: "Daily Tending is the amount of work needed to keep this pasture functioning. If the workers fail do do the tending, animals will start to die. Resets each day.",
	SlaughterAll: "Slaughter all?",
	SlaughterAllDesc: "Slaughter all animals and immediately receive some produce?",
},
settlement.room.health.asylum.Gui: {
	Treatment: "Treatment",
	TreatmentD: "Treatment factor is determined my the number of employed wards and degrade of the room. Keep rooms fully employed for the best recover rates.",
},
settlement.room.home.HOME_TYPE: {
	allD: "Homes for everyone.",
	allClassD: "Homes for all {0}",
	raceClass: "{0}, {1}",
	raceClassD: "Homes for {0}, {1}",
},
settlement.room.home.house.HomeHoverer: {
	Residents: "{0} Residents ({1})",
	VacantFor: "{0} Vacancies ({1})",
},
settlement.room.industry.mine.Constructor: {
	problemMore: "This room must be partially placed on {0} in order to function.",
	mustBe: "Must not be placed on {0}",
},
settlement.room.industry.mine.MineFactory: {
	itProblem: "Must not be placed on deposits",
},
settlement.room.industry.mine.ROOM_MINE: {
	OutputD: "When building the mine, the density of the {0} determines the output. The highest density is applied when you have but 1 worker. This value will move down to the average density the more people you employ in the mine. Increasing the amount of workers will always result in more produce, the efficiency/worker will go down however.",
	Output: "Output",
},
settlement.room.industry.module.IndustryUtil: {
	ProductionRate: "Production Rate Per Day Per Worker",
	ConsumptionRate: "Consumption Rate Per Day Per Worker",
	BaseRate: "Base Rate",
},
settlement.room.industry.refiner.Gui: {
	full: "Internal storage is full",
},
settlement.room.industry.woodcutter.Constructor: {
	problem: "Must not be placed on trees",
	prob: "This room must partially be placed on trees in order to function.",
	probMore: "This room must be placed on more trees in order to function.",
},
settlement.room.infra.admin.Gui: {
	TargetD: "Estimation of how much Administration can be produced and maintained:",
},
settlement.room.infra.export.Gui: {
	NoResource: "No resource has been selected for export.",
	NoSell: "There are no resources to sell!",
},
settlement.room.infra.hauler.Gui: {
	hauled: "hauled",
	fetch: "fetch",
	fetchDesc: "If this is enabled, haulers will take resources from Warehouses with Fetch disabled, as well as loose resources on the ground.",
},
settlement.room.infra.importt.Gui: {
	TotalSpace: "Total Space",
	UsedSpace: "Used Space",
	Incoming: "Incoming Wares",
	Accepting: "Accepting",
},
settlement.room.infra.janitor.Gui: {
	Missing: "Missing Resources",
	MissingDesc: "Depending on what is maintained and repaired, certain resources might be required. A janitor will search for these in a radius of 150 tiles and if not found, maintenance work will be much slower.",
},
settlement.room.infra.stockpile.Gui: {
	Fetch: "Fetch",
	FetchD: "If fetch is toggled, deliverymen will fetch this resource from other stockpiles that have not enabled fetch for this resource.",
	emptyTo: "Empty To:",
	Choose: "Choose a different Warehouse that is not currently emptying to this one:",
	emptyToDesc: "If there is nothing to collect within the radius, the workers will start delivering non-fetching resources to this other stockpile.",
	capacityD: "Used Capacity",
	Crates: "Crates",
	allocatedCrates: "Allocated Crates/Total crates",
},
settlement.room.infra.stockpile.ROOM_STOCKPILE: {
	bname: "Carry Capacity",
	bdesc: "Carry Capacity of all logistics workers.",
},
settlement.room.infra.stockpile.StockpileTally: {
	Stored: "Stored",
	StoredD: "How much is stored in your warehouses",
},
settlement.room.infra.transport.Cart: {
	organise: "Organizing",
	Transporting: "Transporting",
},
settlement.room.infra.transport.Gui: {
	TransportTo: "Destination",
	TransportToD: "The Transport Target room this transport is transporting to.",
	TransportToSet: "Set Destination",
	TransportToSetD: "Set the Transport Target room this transport will transport to. Must be a warehouse, or a hauler.",
	NotSet: "Not Set!",
	NotSetD: "Destination not set or invalid!",
	NotSpace: "The destination does not have the capacity to receive a transport.",
	fetch: "fetch",
	fetchDesc: "Enabled means that not only scattered resources will be fetched, but also resources in warehouses, who have their fetch disabled.",
},
settlement.room.knowledge.laboratory.Gui: {
	TargetD: "Estimation of how much knowledge can be produced and maintained:",
},
settlement.room.knowledge.library.Gui: {
	TargetD: "Estimation of how much knowledge can be boosted by",
},
settlement.room.knowledge.school.Gui: {
	learningRate: "Learning Rate",
	learningRateI: "{0}% / day",
},
settlement.room.knowledge.university.Gui: {
	learningRate: "Learning Rate",
	learningRateI: "{0}% / day",
},
settlement.room.knowledge.university.ROOM_UNIVERSITY: {
	iName: "Knowledge limit",
	iDesc: "the maximum knowledge to teach. Subjects that are above this knowledge limit will not attend this service",
},
settlement.room.law.prison.Gui: {
	trialed: "Trialed",
	trialedNot: "Not Trialed",
	death: "Sentenced to death.",
	Slave: "Sentenced to enslavement.",
	Serving: "Sentenced to prison. Release in {0} days.",
},
settlement.room.main.construction.ConstructionHoverer: {
	progress: "Construction Progress",
	cleared: "cleared: ",
	Materials: "Materials",
	Dormant: "(Dormant. Activate to commence work)",
},
settlement.room.main.construction.ConstructionInstance: {
	Construction: "Construction",
	Broken: "Broken",
},
settlement.room.main.construction.Copier: {
	name: "Room Copier",
	IncludeWalls: "Include Walls",
	desc: "Copies already planned rooms",
	indoor: "This room requires to be built indoors and you must pick a structure type.",
},
settlement.room.main.construction.FurnisherStat: {
	Services: "Services",
	serviceDesc: "Total amount of people that can be served simultaneously. The other (number) is an estimate of how many subjects the room will be able to serve, derived from your subject's properties.",
	productionD: "The estimated amount of resources that the room will output per day.",
	Efficiency: "Efficiency",
	EfficiencyD: "Efficiency is increased by certain items and can increase the usefulness of the room.",
	employeesD: "The amount of subjects needed to operate this room. The room might require less or more workers depending on circumstances.",
},
settlement.room.main.construction.RoomPlacerArea: {
	name: "Expand Room",
	shrink: "Shrink Room",
},
settlement.room.main.construction.RoomPlacerDoor: {
	name: "Place Doorway",
	shrink: "Remove Doorway",
},
settlement.room.main.construction.RoomPlacerItemArea: {
	undo: "Remove Item",
},
settlement.room.main.construction.RoomPlacerItemSingle: {
	undo: "Remove Item",
},
settlement.room.main.construction.RoomPlacerPlacability: {
	TooSmall: "The area is too small. There must be an area of at least {0}. Expand the shape of the room.",
	NotEnoughItems: "This room plan has insufficient: {0} items. Place more items inside the shape to continue.",
	NotEnough: "This room will have insufficient {0}. Either the shape needs to be expanded, or more items need to placed.",
	Disconnected: "area must be connected",
	BlockingSelf: "items are cutting off room. Make sure the room can be reached from the outside.",
	TooThin: "Area is too thin at places. Expand the area to at least 3x3",
	NotInside: "Must be placed inside the designated area. You must expand the area before you can place items.",
	NotBlockOther: "Must not block other item",
	WillBeBlock: "Must not be blocked by other items",
	WillBlockRoom: "Area is not connected, or an item is cutting off part of the room.",
	ItemsREached: "Max amount of this item is reached",
	ItemMustREac: "Item must be reachable",
},
settlement.room.main.Deleter: {
	name: "Delete Room",
	desc: "Destroys the room, recovering some of the resources used to build it. Cannot be undone.",
},
settlement.room.main.RoomCategories: {
	other: "Other",
	Mines: "Mines",
	Refining: "Refining",
	Crafting: "Crafting",
	Law: "Law",
	Farms: "Farms",
	Aquaculture: "Aquaculture",
	Husbandry: "Husbandry",
	Food: "Food",
	Military: "Military",
	Knowledge: "Knowledge",
	Hygiene: "Hygiene",
	Health: "Health",
	Graves: "Graves",
	Temples: "Temples",
	Procreation: "Procreation",
	Entertainment: "Entertainment",
	Decorations: "Decorations",
	Fortification: "Fortification",
	Agriculture: "Agriculture",
	Work: "Work",
	Logistics: "Logistics",
	Civics: "Civics",
	Infrastructure: "Infrastructure",
	Housing: "Housing",
	Fundament: "Fundament",
},
settlement.room.main.RoomIsolation: {
	isolation: "isolation",
	desc: "Isolation prevents room degradation and sound pollution. Surrounding walls increase isolation, while doors and gaps decrease it. Poorly isolated rooms need more maintenance.",
},
settlement.room.military.archery.Gui: {
	Limit: "Recruits limit",
	LimitD: "The number of recruits that you allow to train simultaneously.",
},
settlement.room.military.artillery.ROOM_ARTILLERY: {
	control: "Control artillery piece in the battle view.",
},
settlement.room.military.barracks.Gui: {
	Limit: "Recruits limit",
	LimitD: "The number of recruits that you allow to train simultaneously.",
},
settlement.room.military.supply.Gui: {
	stored: "stored",
	fetch: "fetch",
	fetchDesc: "The supply workers will fetch from warehouses normally. Toggle this to also fetch from warehouses that have fetch enabled.",
	Fill: "Fill",
	fillD: "Sets a limit for how much this depot may store",
	SuppliesD: "Various supplies needed for the army. That can boost it in various ways.",
},
settlement.room.service.arena.Gui: {
	gladiators: "Gladiators",
	gladiatorsD: "The amount of prisoners that have performed. This affects quality. Poor access to prisoners will drag his value down.",
},
settlement.room.service.food.canteen.Gui: {
	Food: "Meals",
},
settlement.room.service.food.eatery.Gui: {
	Food: "Food",
	Amount: "Amount",
	Incoming: "Incoming",
	Consumed: "Consumed",
},
settlement.room.service.nursery.Gui: {
	next: "Days until next child: ",
},
settlement.room.spirit.dump.ROOM_DUMP: {
	RemoveProblem: "This resting place still holds the dead and can not be removed. Deactivate the room and allow the corpses to decompose peacefully. Current cadavers: {0}. Days until clear: {1}.",
},
settlement.room.spirit.grave.GraveData: {
	Respect: "Respect",
	RespectD: "Respect is gained by furnishing your rooms properly",
	Disturbance: "Grave Disturbance",
	DisturbanceD: "Disturbance happens when a occupied burial service is removed or broken. It will slowly decrease with time as subjects forget. Deactivate the room first and let the remains dissipate before removing them.",
	Burried: "Buried",
	BurriedD: "The amount of subjects successfully buried recently.",
	Corpses: "Failed",
	CorpsesD: "The amount of corpses that have failed to be buried recently.",
	Value: "Value",
	ValueD: "The value is the partition of successfully buried multiplied with respect and degrade.",
	Total: "Total Graves",
	TotalD: "Total amount of graves",
	Available: "Available",
	AvailableD: "Available Graves.",
},
settlement.room.spirit.temple.Gui: {
	Respect: "The respect value of this temple. It is a combination of Sacrifices, room layout and priests.",
	Sacrifice: "Sacrificing",
	SacrificeD: "Sacrificed",
	SacrificeYearD: "Sacrificed this year.",
	SacrificingD: "How well this temple is sacrificing. In order to sacrifice well, the priests must have access to what has being sacrificed. The temple requires {0} sacrifices per day.",
	SacrificingHuman: "This temple sacrifices prisoners that have been condemned to death. Currently there are a supply of {0} such prisoners.",
	SacrificingAnimal: "This temple sacrifices animals. Livestock is needed",
	SacrificingResource: "This temple sacrifices {0}.",
	NoSacrifices: "No sacrifices are available!",
	PriestsD: "The staffing of this temple. Has an effect on respect. Temples must be fully staffed.",
},
settlement.stats.CAUSE_ARRIVE: {
	Born: "Born",
	BornD: "Subjects that have been born in your city.",
	Immigrated: "Immigrated",
	ImmigratedD: "Subjects that have immigrated to your city.",
	Emancipated: "Emancipated",
	EmancipatedD: "Subjects that are freed slaves.",
	Parole: "Parole",
	ParoleD: "Subjects that have been prisoners and are now pardoned and free citizens.",
	Soldiers: "Soldiers",
	SoldiersD: "Soldiers that have returned from campaigning.",
	Readjusted: "Readjusted",
	ReadjustedD: "Subjects that have been readjusted in the asylum and cured of insanity.",
},
settlement.stats.CAUSE_LEAVE: {
	Army-Duty: "Army-Duty",
	Army-Duties: "Army-Duties",
	ArmyDutyD: "Subjects that have left your city to join distant armies.",
	Emigrated: "Emigrated",
	Emigration: "Emigration",
	EmmigratedD: "Subjects that have left your city.",
	Starved: "Starved",
	Starvation: "Starvation",
	StarvedD: "Subjects that have starved to death from lack of food.",
	Sacrificed: "Sacrificed",
	Sacrifices: "Sacrifices",
	SacrificedD: "Subjects that have been sacrificed to the gods.",
	Slain: "Slain",
	Slaying: "Slaying",
	SlainD: "Subjects that have fallen in battle.",
	Mauled: "Mauled",
	Mauling: "Mauling",
	AnimalsD: "Subjects that have been slain by wild beasts.",
	Aging: "Aging",
	Age: "Age",
	AgeD: "Subjects that have died naturally from old age.",
	Accident: "Accident",
	Accidents: "Accidents",
	AccidentD: "Subjects that have died from accidents.",
	Heat: "Heat",
	Heat Exposure: "Heat Exposure",
	HeatD: "Subjects that have died from heat exposure. Build bodies of water to prevent this.",
	Cold: "Cold",
	Cold Exposure: "Cold Exposure",
	ColdD: "Subjects that have frozen to death. Build hearths to avoid.",
	Murdered: "Murdered",
	Murders: "Murders",
	MurderD: "Subjects that have been murdered.",
	Disease: "Disease",
	Diseases: "Diseases",
	DiseaseD: "Subjects that have died from diseases.",
	Executed: "Executed",
	Executions: "Executions",
	ExecutedD: "Subjects that have been executed.",
	Punished: "Punished",
	Punishment: "Punishment",
	PunishmentD: "Subjects that have been turned into prisoners.",
	Drowned: "Drowned",
	Drownings: "Drownings",
	DrownedD: "Subjects that have drowned.",
	Deserted: "Deserted",
	Desertion: "Desertion",
	DesertedD: "Soldiers that have deserted.",
	Exiled: "Exiled",
	Exile: "Exile",
	ExileD: "People condemned to exile. The will are forced to leave the city and never come back.",
	Brawl: "Brawl",
	Brawls: "Brawls",
	BrawlD: "Subjects that have died from a brawl that has gone too far. Try separating the homes of species that hate each other.",
	Other: "Other",
	Others: "Others",
	OtherD: "Other causes.",
},
settlement.stats.standing.StandingCitizen: {
	Soldiers: "Soldiers",
	SoldiersD: "The amount of soldiers in the city",
	Armies: "Armies",
	ArmiesD: "The amount of soldiers stationed on the world map",
	Royalrace: "Royal Race",
	RoyalD: "A constant buff to your starting race",
	Loyalty: "Loyalty",
	loyalty_desc: "The overall loyalty of your citizens. The goal of any despot is to keep this high. Lower loyalty than 100% could lead to bloody riots. Happiness is a big factor, but other means exist...",
	Submission-Target: "Submission-Target",
	submissionTarget_desc: "What your submission will be in a few days.",
	Happiness: "Happiness",
	happiness_desc: "Happiness is fulfillment in proportion to expectations. Fulfillment is gained by providing services and a just rule. Expectation is the amount of citizens in your city. Happiness boosts submission and promotes immigration.",
	Fulfillment: "Fulfillment",
	full_desc: "A fulfillment modifier can be access to a tavern, or a road, or increased food rations. Each race have different weights they tied to each modifier. Focus should be on the biggest modifiers first. Total Fulfillment is an exponential function of the sum of all your fulfillment modifiers divided by the sum of all max fulfillments.",
	Expectations: "Expectations",
	exp_desc: "As your population grows, so will your subjects' expectations. Expectation is tied to a species occurrence in the climate you've chosen to settle and grows linearly.",
},
settlement.stats.standing.StandingSlave: {
	Target: "Target Submission",
	TargetD: "What value your slave submission is moving towards.",
	Submission: "Submission",
	SubmissionD: "The submission of your slaves. Low submission can lead to uprisings. Submission is gained by providing fulfillment for your slaves and keeping their numbers down relative to your citizen population. Different species also have different submission properties.",
	RSubmission: "Submission",
	RSubmissionD: "The natural submission property of your slaves. This is a combination of the racial makeup of your slave population.",
	Army: "Army",
	ArmyD: "The size of your army. This size greatly deters any potential uprisings.",
	Fulfillment: "Fulfillment",
	FulfillmentD: "Slaves wants some comfort, same as the next person. In order to keep your slaves submissive, you must provide some basic services for them.",
	Advantage: "Advantage",
	AdvantageD: "The amount of slaves contra your citizen population. The more slaves, the greater the defiance against you, and the more talk about an uprising.",
},
settlement.stats.STATS: {
	Status: "Status",
	desc: "Miscellaneous statistics about your city. Some affecting your happiness.",
},
settlement.stats.StatsAccess: {
	access: "Access: ",
},
settlement.stats.StatsBattle: {
	Division: "Division",
	DivisionD: "The Army Division this subject belongs to.",
	Recruit: "Recruit",
	RecruitD: "The Army Division this subject will join when training is complete.",
},
settlement.stats.StatsDisease: {
	infected: "Infected",
	infectedD: "Amount of subjects Infected with a disease",
	disease: "Disease",
	diseaseD: "The current disease this subject is suffering from.",
},
settlement.stats.StatsEquippables: {
	Level: "{0} Level",
	Target: "{0} Target",
	Level_desc: "The target number of items each individual should equip. Special cases for this is tools, which is set at each industry. Weapons are also set separately for each division.",
	WearRate: "Wear Rate",
	WearRateD: "The rate at which each equipped item is worn out.",
	Equipped: "Equipped: {0}",
},
settlement.stats.StatsFood: {
	RationsT: "Target Food rations. Increases health.",
	DrinkT: "Target Drink rations",
},
settlement.stats.StatsHome: {
	desc: "This subject's place of residence.",
},
settlement.stats.StatsNeeds: {
	Needs: "Needs",
	NeedsD: "Needs increase with time and is fulfilled by certain services or activities",
	Dirtiness: "Dirtiness",
	DirtinessD: "How dirty this this individual is. Dirty subjects will seek out washing services.",
	Injuries: "Injuries",
	InjuriesD: "Injuries. Untreated may lead to death. Injured subjects will seek out wards.",
	Exhaustion: "Exhaustion",
	ExhaustionD: "Exhausted subjects will lay down to rest to recover.",
	Constipation: "Constipation",
	ConstipationD: "Constipated subjects will seek out lavatories.",
	Hunger: "Hunger",
	HungerD: "Hungry subjects will seek out food. Hunger may lead to starvation and death.",
	Thirst: "Thirst",
	ThirstD: "Thirsty subjects will seek out drink.",
	Religion: "Religion",
	ReligionD: "This indicates how much a subjects wants to visit the temple of their god.",
	Doctor: "Doctor",
	DoctorD: "This indicates how often a subjects need to visit a physician.",
},
settlement.stats.StatsPopulation: {
	Trapped: "Trapped",
	TrappedD: "People who are trapped and cut off from the throne",
	Emigrating: "Emigrating",
	EmigratingD: "People who are upset and leaving your city.",
	Demography: "Demography",
	DemographyDesc: "The different age groups of your citizens",
},
settlement.stats.StatsReligion: {
	religion: "Religion",
	religionD: "Affiliated religion.",
	followers: "Followers",
	followersD: "The amount of followers for this religion.",
	access: "Temple access",
	accessD: "The access of the temples of this religion.",
	value: "Temple Respect",
	valueD: "The value of respect shown towards this religion. Comes from the temple designs and management of this belief",
},
settlement.stats.StatsService: {
	Access: "Access",
	AcessDesc: "The level of access this subject has to a service. Can be improved by building more service facilities and make sure they are close enough for your people to utilize.",
	Quality: "Quality",
	QualityDesc: "The quality of a subjects last visit to this facility. Often improved by placing special items in the rooms in question.",
	Distance: "Proximity",
	DistanceDesc: "The distance the subject has had to walk to reach service determines proximity. To improve, make sure your city has a good coverage of services.",
	TotalDesc: "The access and quality this subject group has. Can be improved by building more facilities, keeping them maintained, and also in some cases building them well.",
	Eating-Services: "Eating-Services",
	Hygiene-Services: "Hygiene-Services",
	Drinking-Services: "Drinking-Services",
	Schools: "Schools",
},
settlement.stats.StatsStored: {
	desc: "The amount of resources stored in warehouses per capita",
},
settlement.stats.StatsTraits: {
	boost: "Trait: {0}",
	Trait: "Trait",
	Traits: "Traits",
	TraitDesc: "Traits can manifest themselves in individual subjects and in turn change properties of said person",
},
settlement.stats.StatsWork: {
	RetirementT: "Retirement age target",
	Access: "Access",
	AccessD: "Access to retirement activities.",
	Quality: "Quality",
	QualityD: "Quality and Degrade of retirement activities.",
	Type: "Type",
	TypeD: "Subjects will try and find the activity that suits them best. (Highest work fulfillment)",
	Employment: "Employment",
	EmploymentD: "This subject's place of work.",
},
settlement.stats.StatsWorkAccident: {
	Accident: "Accident!",
	AccidentD: "An accident has occurred. {0} subjects were injured and will seek out a hospital. There were {1} deaths.",
	Go: "Go to Site",
},
settlement.thing.halfEntity.caravan.Caravan: {
	Caravan: "Caravan",
},
settlement.thing.halfEntity.caravan.TypeArmySupply: {
	verb: "fetching",
},
settlement.thing.halfEntity.caravan.TypeDelivier: {
	name: "delivering",
},
settlement.thing.halfEntity.caravan.TypeDelivierStorage: {
	name: "delivering",
},
settlement.thing.halfEntity.caravan.TypeFetcher: {
	verb: "fetching",
},
settlement.thing.halfEntity.caravan.TypeFetcherWarehouse: {
	verb: "fetching",
},
settlement.thing.projectiles.Trajectory: {
	OUT_OF_RANGE: "Out of range!",
	FRIENDLIES: "Ally subjects are in the trajectory and might get hit!",
	TERRAIN: "Trajectory blocked by terrain",
},
settlement.thing.ThingsCadavers: {
	name: "Cadaver",
	noRes: "No resources",
},
settlement.thing.ThingsCorpses: {
	name: "Corpse",
	age: "Age",
	burrial: "Burial Site",
	onlyMassGrave: "This corpse can only be dumped in a mass grave.",
},
settlement.tilemap.GuiTerrainHoverInfo: {
	fertility: "Fertility",
	Degrade: "Degrade:",
	Strength: "Strength:",
	Border: "This is a static entry point to your city. Invasions will be launched here. One can build on it, but should someone invade it will be instantly cleared of obstructions.",
},
settlement.tilemap.TDestroyed: {
	broken: "broken {0}",
},
settlement.tilemap.TerrainDiagonal: {
	name: "Make Diagonal",
	desc: "Turns walls diagonal, only for aesthetic purposes.",
	undo: "Make Rectangular",
	undoDesc: "Turns walls rectangular, only for aesthetic purposes.",
	problem: "Must be placed on a wall like structure",
},
settlement.tilemap.TFortification: {
	stairs: "Stairs",
},
settlement.tilemap.TGrowable: {
	Ripe: "(Ripe)",
	RipeNot: "(Not Ripe)",
	Name: "Wild {0}",
},
util.dic.DicArmy: {
	Balance: "Balance",
	Army: "Army",
	Armies: "Armies",
	Artillery: "Artillery",
	Soldiers: "Soldiers",
	SoldiersD: "Soldiers are used to defend your settlement and instill public order. Soldiers can also be sent out to join world armies. The more soldiers you have, the less likely you are to get raided.",
	SoldiersTarget: "Soldiers Target",
	Campaigning: "Campaigning",
	CampaigningD: "Soldiers that are out campaigning.",
	Recruit: "Recruit",
	Recruits: "Recruits",
	Conscripts: "Conscripts",
	Conscripted: "Conscripted",
	ConscriptsD: "Conscripts are the population available to draft. They replenish slowly from the total population of your realm, and it excludes men already conscripted into your armies. It is possible to over-conscript, in which case, armies will slowly deteriorate.",
	Casualties: "Casualties",
	Conscriptable: "Conscriptable",
	Formation: "Formation",
	Garrison: "Garrison",
	GarrisonD: "Garrisons will prolong an enemy siege and provide more attrition to enemies located in the region.",
	Move: "Move Army. Moving armies do not replenish or muster new men.",
	MoveCant: "Army can't move when there are no soldiers.",
	Stop: "Stop",
	Reassign: "Reassign",
	Disband: "Disband",
	Training: "Training",
	TrainingD: "Training improves soldiers skill, stamina and discipline on the battlefield.",
	Equipment: "Equipment",
	EquipmentD: "Equipment increases offensive and defensive capabilities of your troops.",
	Experience: "Experience",
	RecruitmentTime: "Recruitment Time",
	Fortified: "Fortified",
	Fortifying: "Fortifying",
	Division: "Division",
	Divisions: "Divisions",
	SoldiersAreTraining: "{0} Conscripts are training.",
	NotRecruiting: "No soldiers are being recruited, since this army isn't fortified, or because it is situated outside of your controlled territory.",
	Battle: "Battle",
	BattleOf: "Battle of {0}",
	Engage: "Engage",
	AutoResolve: "Auto Resolve",
	Retreat: "Retreat",
	Intercepting: "Intercepting {0}",
	Intercept: "Intercept",
	MarchingTo: "Marching To {0}",
	Morale: "Morale",
	MoraleD: "Morale determines how long your troops will stand their ground for. Each division has an individual moral, that is also affected by a global one.",
	engageD: "Take personal command and fight this battle on the field.",
	autoD: "Auto resolve this battle. The result will be {0}. You will lose about {1} men and inflict about {2} casualties on the enemy.",
	RetreatD: "Make a tactical retreat. The army will lose {0} men.",
	Victory: "Victory",
	Defeat: "Defeat",
	Annihilation: "Annihilation",
	Mercenaries: "Mercenaries",
	Besiege: "Besiege",
	Besieging: "Besieging",
	BesiegingSomething: "Besieging {0}",
	Supplies: "Supplies",
	SuppliesD: "Campaigning armies requires supplies to function. Some are essential, while others only provide morale boosts.",
	Spoils: "Spoils",
	Captives: "Captives",
	Assault: "Assault",
	SiegeOf: "Siege of {0}",
	Attack: "Attack",
	Attacking: "Attacking",
	Enemy: "Enemy",
	Puppet: "Puppet",
	Neutral: "Neutral",
	Rebels: "Rebels",
	Muster: "Muster",
	Musterd: "Mustered",
	MusterDesc: "Muster Men. Calls to arms and have your subjects form up in their division and man artillery, or un-muster men and have them return to their civil duties.",
	MusterOneProblem: "One or more divisions do not have a position. Set a position by clicking the division, then click and drag on the ground where you want them.",
	MusterProblem: "The division do not have a position. Set a position by clicking the division, then click and drag on the ground where you want them.",
	Ammunition: "Ammunition",
	AmmoDesc: "Ammunition is used by range weapons.",
	ReloadingXX: "Reloading ({0} seconds)",
	Projectiles: "Projectiles",
	Banner: "Banner",
	SplashDamage: "Splash Damage",
	ReloadTime: "Reload Time",
	Power: "Power",
	PowerD: "Power of a unit is a mix of all its stats.",
},
util.dic.DicGeo: {
	Regions: "Regions",
	RegionDesc: "The world is made up of regions. Regions have people living in them, which lives you can control if you manage to capture it. A region has an urban center, that can either be a town of a faction capitol. You upgrade regions with administration points.",
	MustBeOwnRegion: "Must be in a controlled region",
	MustNotBeWater: "Must not be placed on water.",
	NoRuler: "Free Lands",
	BoundFor: "Bound For {0}",
	Regional: "Regional {0}",
	Region: "Region",
	Tribute: "Tribute",
	Trade: "Trade",
	Capitol: "Capitol",
	World: "World",
	Caravan: "Caravan",
	Moving: "Moving",
	Location: "Location",
	Global: "Global",
	AtWar: "At War",
	AtWarD: "Warring factions do not trade, and will try to destroy one another.",
	Vassal: "Vassal",
	VassalD: "A vassal has an protector that it pays taxes to. They trade like normal.",
	Protector: "Protector",
	ProtectorD: "A protector is a vassals overlord and will receive taxes from the vassal.",
	TradePartner: "Trade Partner",
	TradePartnerD: "Trade partners are able to trade goods with one another.",
},
util.dic.DicMisc: {
	List: "List",
	Area: "Area",
	Equipped: "Equipped",
	Requires: "Requires",
	Cost: "Cost",
	TotalCost: "Total Cost",
	Level: "Level",
	Unlocks: "Unlocks",
	Next: "Next",
	Previous: "Previous",
	Progress: "Progress",
	Search: "Search",
	Requirement: "Requirement",
	Happiness: "Happiness",
	Quality: "Quality",
	Addative: "Additive",
	Workload: "Work Load",
	WorkloadD: "How busy your employees are. If workload is low, it means some of the workers have nothing to do and are wasting their time. If workload is 100%, your workers might have too much to do and the room might need to have more workers allocated.",
	Workforce: "Work Force",
	WorkforceD: "Your rooms require employees to function. These workers will stick to their place of work. Those not employed are named 'oddjobbers'. These will do other jobs, such as building and clearing.",
	Oddjobber: "Oddjobber",
	Oddjobbers: "Oddjobbers",
	Admin: "Admin",
	Range: "Range",
	Mass: "Mass",
	Subject: "Subject",
	Occupation: "Occupation",
	Upgrade: "Upgrade",
	Accuracy: "Accuracy",
	Access: "Access",
	Encyclopedia: "Encyclopedia",
	Activated: "Activated",
	ConsumptionRate: "Consumption Rate",
	Home: "Home",
	Filter: "Filter",
	Multipliers: "Multipliers",
	Close: "Close",
	RightClick: "Right Click",
	Population: "Population",
	Unreachable: "Unreachable",
	Menu: "Menu",
	Messages: "Messages",
	Start: "Start",
	Target: "Target",
	Needed: "Needed",
	Knowledge: "Knowledge",
	Generating: "Generating",
	Info: "Info",
	All: "All",
	Allocated: "Allocated",
	Free: "Free",
	Fertility: "Fertility",
	FertilityD: "Fertility increases farm and pasture output and allows for more wild crops to grow.",
	Undo: "Undo",
	Copy: "Copy",
	Total: "Total",
	Rate: "Rate",
	Base: "Base",
	Reset: "Reset",
	Babies: "Babies",
	IncubationDays: "Incubation Days",
	AdultAge: "Adult at Day:",
	SAVING: "SAVING",
	save: "save",
	OPTIONS: "OPTIONS",
	load: "load",
	delete: "delete",
	on: "on",
	off: "off",
	confirm: "confirm",
	cancel: "cancel",
	new: "new",
	rename: "rename",
	name: "name",
	limit: "limit",
	Max: "Max",
	Rarity: "Rarity",
	Settlement: "Settlement",
	World: "World",
	General: "General",
	MouseWheelAdd: " + Mousewheel",
	Clear: "Clear",
	Emits: "Emits",
	Employees: "Employees",
	Employment: "Employment",
	Degrade: "Degrade",
	ProductionRate: "Production Rate",
	Current: "Current",
	OK: "OK",
	Yes: "Yes",
	No: "No",
	Misc: "Misc.",
	OpenOther: "Opens Other Menu...",
	Boosts: "Boosts",
	Properites: "Properties",
	Color: "Color",
	Minimum: "Minimum",
	Health: "Health",
	Power: "Power",
	Overlays: "Overlays",
	None: "None",
	Sort: "Sort",
},
util.dic.DicRes: {
	InitialCost: "Initial Cost",
	Upkeep: "Upkeep",
	Curr: "Denari",
	Currs: "Denari",
	Buy: "Buy",
	Buying: "Buying",
	Bought: "Bought",
	Sell: "Sell",
	Sold: "Sold",
	Earnings: "Earnings",
	Expenses: "Expenses",
	Resource: "Resource",
	Treasury: "Treasury",
	TreasuryDesc: "An overview of your money. Money is gained primarily through exports, and lost through imports.",
	Buyers: "Buyers",
	Sellers: "Sellers",
	Capacity: "Capacity",
	ImportCapacity: "Import Capacity",
	ImportCapacityDesc: "The available space of your import depots for import and tribute, minus stored and incoming goods.",
	ImportLevel: "Import Level",
	ExportCapacity: "Export Capacity",
	ExportCapacityDesc: "The amount of goods in your export depots ready to be exported.",
	ExportLevel: "Export Level",
	Inbound: "Inbound",
	Outbound: "Outbound",
	Importable: "Importable",
	Exportable: "Exportable",
	Amount: "Amount",
	Stored: "Stored",
	Produced: "Produced",
	Taxes: "Taxes",
	TaxesD: "What is possible to tax from this region in mid-game.",
	Net: "Net",
	sellPrice: "Sell Price",
	noBuyers: "No buyer of this resource is available.",
	noSellers: "No sellers of this resource is available. They are too distant.",
	buyPrice: "Buy Price",
	Price: "Price",
	Toll: "Toll",
	NotEnoughCurr: "Not enough Denari.",
	cantAfford: "You don't have enough credits to buy this resource. Trades are done in increments of 32. You need at least {0} credits to purchase a batch of this resource. Get more credits exporting something at an export depot.",
	cantStore: "You don't have enough import depot space to accept a batch of this resource. Build an import depot and set it to accept this resource.",
	noStorage: "You don't have enough export depot space to sell a batch of this resource. Build an export depot and set it to fetch this resource.",
	Storage: "Storage",
	SpoilRate: "Spoil-Rate",
	Edible: "Edible",
	Rate: "Rate",
	Supplies: "Supplies",
	Spoils: "Spoils",
	Deposits: "Deposits",
	ForSale: "For Sale",
	Food: "Food",
},
util.gui.misc.GChart: {
	current: "Current",
},
util.gui.misc.GColorPicker: {
	color: "color",
	red: "red",
	green: "green",
	blue: "blue",
},
util.gui.misc.GInput: {
	clear: "Clear all text. (Also by clicking 'del' on the keyboard)",
},
util.gui.slider.GSliderInt: {
	setAmount: "Set amount",
	setAmountD: "Set amount {0}-{1}",
},
util.race.PERMISSION: {
	name: "Permission",
	desc: "Toggle permission",
},
util.save.SaveFile: {
	1Minute: "1 minute ago",
	Minutes: "{0} minutes ago",
	1Hour: "1 hour ago",
	Hours: "{0} hours ago",
	Yesterday: "yesterday",
	DaysAgo: "{0} days ago",
	Version: "This save is from a previous version and will probably not load!",
	Mod: "This save is made with a different mod configuration and will probably not load!",
},
view.battle.BattlePanel: {
	explanation: "In order to deploy and use your army, press the muster button to the left. Click and drag to select an area of troops, or click the unit cards. You can use control to toggle unit card selection and shift to select several.",
	restart: "restart",
	restartD: "Are you sure you want to start the battle over?",
	Retreat: "Retreat",
	RetreatD1: "Retreat and lose {0} soldiers.",
	RetreatD: "Are you sure you wish to retreat and lose {0} soldiers?",
	throneD: "When enemies are standing by the throne, this timer will tick down, and once 0, the battle will be lost.",
},
view.battle.BattlePlacerAttack: {
	AttackMelee: "Attack unit",
	AttackRanged: "Fire at unit",
	AttackMix: "Attack/fire at unit",
	AttackBuilding: "Attack Building",
	BombardBuilding: "Bombard Building",
	BombardArea: "Bombard Area",
	Range: "Artillery out of range!",
	RangeSome: "Some Artillery out of range!",
},
view.battle.DivHoverer: {
	Standing: "Standing",
	Moving: "Moving",
	Engaging: "Engaging",
	Firing: "Firing",
	Building: "Attacking Structure",
	Charging: "Charging",
},
view.battle.UISelection: {
	dPosition: "To position your troops, click and hold the left mouse button.",
	dAdd: "To add troops to your selection, hold {0}, then click and drag.",
	dMove: "To reposition your troops, use the arrow keys ({0})",
	dSpin: "To rotate your selection, hold  {0}, click and hold where the center should be.",
	dSelectAll: "To select all divisions, press {0}.",
	dStopAll: "Stop all divisions and clear targets ({0})",
	dFireAtWill: "Toggle fire at will. Allows soldiers and artillery to fire at enemies within reach.",
	dGuard: "In guard mode soldiers will stay in formation when fighting. Increases defense, but decreases offence.",
	Attack: "To attack an enemy division, left click on it. If ranged, to attack an enemy division melee, hold {0} and left click.",
	MopUp: "When soldiers are in position, they'll break it and go chasing enemy soldiers or rioteers. Morale will be very weak while doing this.",
	FormationLoose: "Loose formation. Increases offence, but decreases defence.",
	FormationTight: "Tight formation. Increases defence, but decreases offence.",
	Run: "makes soldiers move faster, but will also fatigue them faster",
	Charge: "Soldiers will start running in their current direction until they reach an enemy or obstacle. Soldiers will not have a lot of defense, but gain a lot of momentum when colliding, as well as scaring the enemy force.",
},
view.common.BitmapSpriteEditor: {
	hovInfo: "Hold left mouse button to draw. Hold ({0}) to erase.",
},
view.interrupter.ILoadScreen: {
	clickToContinue: "CLICK TO CONTINUE!",
},
view.keyboard.IChange: {
	Pick: "Pick a hotkey for:",
	Explanation: "Either press a single key, or press and hold a key to use as a modulator, then press another key. Hit escape to exit.",
	Sucess: "Hotkey {0} successfully mapped to {1}!",
	Fail: "Hotkey {0} is already in use by {1}, pick another one.",
	Overwritten: "{0} is now without a hotkey!",
},
view.keyboard.Key: {
	none: "---",
	hotkey: "Hotkey: ",
},
view.keyboard.KeyButt: {
	assign: "To assign a new hotkey to this function, press: ",
},
view.keyboard.KeyNames: {
	none: "---",
	unknown: "???",
	space: "space",
	escape: "escape",
	caps-lock: "caps-lock",
	scroll-lock: "scroll-lock",
	num-lock: "num-lock",
	pause: "pause",
	enter: "enter",
	tab: "tab",
	backspace: "backspace",
	insert: "insert",
	delete: "delete",
	right: "right",
	left: "left",
	down: "down",
	up: "up",
	page-up: "page-up",
	page-down: "page-down",
	home: "home",
	end: "end",
	print-screen: "print-screen",
	left-shift: "left-shift",
	left-ctrl: "left-ctrl",
	right-shift: "right-shift",
	right-ctrl: "right-ctrl",
	pad-enter: "pad-enter",
	pad-equals: "pad-equals",
	left-alt: "left-alt",
	left-super: "left-super",
	menu: "menu",
	right-alt: "right-alt",
	right-super: "right-super",
	F: "F{0}",
},
view.keyboard.KeyPageBattle: {
	Up: "Up",
	UpD: "Move selected Divisions.",
	Down: "Down",
	Left: "Left",
	Right: "Right",
	Select: "Select",
	SelectD: "Selects all divisions",
	Show: "Show",
	ShowD: "Shows all division positions.",
},
view.keyboard.KeyPageMain: {
	Assign-hotkey: "Assign-hotkey",
	AssignD: "When hovering specific buttons, you can press this to assign a new hotkey for the button function",
	Scroll-Left: "Scroll-Left",
	Scroll-LeftD: "Moves the map",
	Scroll-Right: "Scroll-Right",
	Scroll-RightD: "Moves the map",
	Scroll-Up: "Scroll-Up",
	Scroll-UpD: "Moves the map",
	Scroll-Down: "Scroll-Down",
	Scroll-DownD: "Moves the map",
	Zoom-In: "Zoom-In",
	Zoom-InD: "Zooms the map",
	Zoom-Out: "Zoom-Out",
	Zoom-OutD: "Zooms the map",
	Minimap: "Minimap",
	MinimapD: "Toggles the minimap",
	Center: "Center",
	ThroneD: "Center the map on the throne or the capitol",
	Rotate: "Rotate",
	RotateD: "Rotates things",
	Increase: "Increase",
	IncreaseD: "Increases size/cycle options",
	Decrease: "Decrease",
	DecreaseD: "Increases size/cycle options\",
	Quicksave: "Quicksave",
	QuicksaveD: "Saves the game under the name 'Quicksave'",
	Quick-Load: "Quick-Load",
	QuickLoadD: "Loads the latest save",
	Pause: "Pause",
	PauseD: "Toggles game pause",
	speed-paused: "speed-paused",
	speed-pausedD: "Sets 0 speed, thus pausing the game.",
	speed-normal: "speed-normal",
	speed-normalD: "Sets 1x speed",
	speed-fast: "speed-fast",
	speed-fastD: "Sets 3x speed",
	speed-fastest: "speed-fastest",
	speed-fastestD: "Sets 25x speed. Double press for x250 speed",
	Slow-Up: "Slow-Up",
	Slow-UpD: "Slowly pans the map",
	Slow-Down: "Slow-Down",
	Slow-DownD: "Slowly pans the map",
	Slow-Left: "Slow-Left",
	Slow-LeftD: "Slowly pans the map",
	Slow-Right: "Slow-Right",
	Slow-RightD: "Slowly pans the map",
	Screenshot: "Screenshot",
	ScreenshotD: "Creates a screenshot, saved in your local files, reachable through the launcher -> info",
	Stats: "Stats",
	StatsD: "Toggles stats",
	Enter: "Enter",
	EnterD: "The enter key.",
	Backspace: "Backspace",
	BackspaceD: "The backspace key.",
	Escape: "Escape",
	EscapeD: "Toggles the menu, or closes panels.",
	mod: "mod",
	modD: "When pressed, modulates certain functions, such as the mouse wheel.",
	place-undo: "place-undo",
	place-undoD: "When pressed, lets you use alternative tools when using a tool.",
},
view.main.Messages: {
	delete: "Delete all read messages?",
	PauseD: "Pause and show this kind of message upon arrival.",
	title: "Title",
	Arrived: "Arrived",
	Messages: "Messages",
},
view.manage.WIKI: {
	name: "Tomb of knowledge",
	article: "Article",
},
view.menu.IMenu: {
	resume: "resume",
	quicksave: "quick-save",
	saveFirst: "save first?",
	options: "options",
	quitMenu: "quit to menu",
	exit: "exit",
	THEMENU: "THE MENU",
},
view.menu.IMenuSave: {
	¤nameYour: "Name your save-game",
	failed: "failed to be overwritten",
	success: "successfully overwritten",
	overwrite: "overwrite",
	successSave: "{0} successfully saved!",
	charsAllowed: "Only characters: {0} are allowed!",
	fail: "Save failed. See error report!",
},
view.menu.ScKeys: {
	nameBig: "KEY SETTINGS",
	name: "key settings",
	restore: "restore",
	cancel: "cancel",
},
view.sett.SettViewStart: {
	start: "Landing Party",
	Regenerate: "Regenerate",
},
view.sett.ToolDefault: {
	clickJob: "Hold '{0}' and click to place more of job: ",
	clickRoom: "Hold '{0}' and click to build another: ",
	clickRoom2: "Hold '{0}' and click to copy this: ",
	reconstruct: "click to reconstruct rooms",
	reconstructPrompt: "Do you wish to refurnish this room? Some progress of the current construction will be lost.",
},
view.sett.ui.army.UIArmy: {
	SoldiersLevelD: "The amount of soldiers this division will conscript. If training room spots are available alongside empty division spots, subjects will begin training and eventually join the division. Subjects will prioritize training before jobs.",
	TrainingLevelD: "The more soldiers are trained, the deadlier they are on the field. A soldier must gain a minimum training level of 1 to be able to join a division. They will then train until the desired level is reached. training recruits and soldiers do not work. If Training is set to max, soldiers will train in perpetuity and thus be professional soldiers.",
	LowSupplies: "Not enough supplies to send this division. Fill up your Army Supply depots!",
	Recall: "Recall",
	RecallD: "Recall this division from its army and have it return to the city.",
	SendOut: "Send Out",
	SendOutD: "Send this division to join an army on the world map.",
	NoArmies: "there are no armies to send this division to. Recruit one on the world map.",
	RecruitD: "The amount of men currently training to be able to join a division.",
	SoldierD: "The amount of soldiers that are ready to be deployed in your city.",
},
view.sett.ui.bottom.Options: {
	CopyArea: "Copy Area",
	Planning: "Planning",
	PlanningD: "When enabled, placed jobs will not be performed until manually activated by your grace.",
},
view.sett.ui.bottom.PopupRooms: {
	cost: "Costs",
	production: "Production",
	optional: "(Optional)",
	Emits: "Emits",
	move: "Move",
	Structures: "Structures",
	Fences: "Fences",
	Roads: "Roads",
	Build: "Build",
	MoveSpeed: "Move speed",
	CurrentRooms: "Current Rooms",
},
view.sett.ui.bottom.UIBuildPanel: {
	Search: "Search",
	SearchD: "Search for tools and rooms",
},
view.sett.ui.bottom.UIHomeOddjobberMover: {
	name: "Odd Mover",
	desc: "Odd jobbers will automatically move out if an employed subject needs their home. This tool manually moves random oddjobbers to desired housing.",
	prob: "Must be placed on a house with vacancies.",
	odd: "No oddjobbers to move!",
	oddNo: "No oddjobbers for specific house. Change assignment for it.",
},
view.sett.ui.bottom.UIHomePlacer: {
	name: "assign homes",
	desc: "lets you assign homes to specific criteria.",
	prob: "Must be placed on a house.",
},
view.sett.ui.bottom.UISavedRooms: {
	not: "A room must be selected, that can be furnished.",
	save: "Save room blueprint",
	name: "Saved room blueprints",
	saved: "Saved!",
},
view.sett.ui.minimap.UIMiniHotSpots: {
	order: "ORDER",
	set: "Set Hotspot",
	setLong: "Sets a hotspot that can easily be navigated to with a single click.",
},
view.sett.ui.minimap.UIMinimapButtons: {
	screenshot_question: "This will capture a huge 1:1 image of your settlement and save it in your screenshot folder. It will take some time. Proceed?",
	screenshot_desc: "Take a super screenshot of your settlement",
	hotspots: "Hot-spots",
	minipanels: "Mini Panels",
},
view.sett.ui.minimap.UIMiniRaces: {
	Double: "Double click to grant access to all immigrants. Right click to open immigration settings.",
},
view.sett.ui.minimap.UIMiniResources: {
	desc: "Click to open resource details, right click to go to warehouse.",
	Exists: "Resources exist scattered on the map that are not yet stored and counted.",
	Food: "Days of food stored for all subjects.",
	Production: "Produced per day:",
},
view.sett.ui.minimap.ViewMiniMapUI: {
	entities: "Color entities based on status",
},
view.sett.ui.noble.UINobles: {
	PH: "Nobles can be appointed to boost different aspects of the game. You appoint a noble by clicking a subject and there is a little winged button there. Nobles will be very expanded upon in the future, so this is very WIP.",
},
view.sett.ui.room.construction.SFrame: {
	{0} construction: "{0} construction",
	removeRoom: "remove room",
	undo: "undo",
	construct!: "construct!",
},
view.sett.ui.room.construction.Shared: {
	indoor: "This room requires to be built indoors and you must pick a structure type.",
},
view.sett.ui.room.construction.SItems: {
	Items: "items",
},
view.sett.ui.room.construction.SMaterial: {
	indoor: "This room requires to be built indoors and you must pick a structure type.",
	walls: "Auto build walls around room.",
	door: "places doorways on walls. Needed to make the room reachable. Doorways decrease isolation, but too little will make entering the room difficult",
},
view.sett.ui.room.construction.SShape: {
	Shape: "Shape",
	Expand: "Expand Room. Items can only be placed on the designated room area.",
	ExpandOver: "Expand Room Over Structures",
	Shrink: "Shrink Room",
	extraDesc: "When rooms are built too deep or wide, extra materials must be used to build and maintain it. Yellow tiles represents this. Shape the room thinner, or remove room tiles in the center to allow for more support to avoid these costs.",
},
view.sett.ui.room.ModuleDegrade: {
	DEGRADE: "Degradation",
	DEGRADE_AVE: "Average degradation amongst these room. Degradation affects a room negatively.",
	DEGRADE_DESC: "Degradation affects rooms negatively. Janitors and idle people will maintain rooms. Some maintenance requires materials.",
	Rate: "Rate",
	RateDesc: "All rooms degrade. The degradation can increase further if large rooms are constructed without adequate ceiling support in the center. Lack of isolation also increases degradation.",
	badIsolation: "Room poorly isolated",
	Support: "Support",
	SupportD: "When a room is built it may require extra support if the shape is very large. As a result, more maintenance is needed.",
},
view.sett.ui.room.ModuleEmployment: {
	EMPLOYEES_DESC: "Actual employees / Target Employees. When you set the target, unemployed people will soon sign up and start working the room. Without sufficient workers, a room will perform poorly. The worker amount isn't fixed. It can vary greatly depending on how the room is laid out, and how well your city is planned. The tool-tip when creating a room will tell you how a guess of many workers will be required in an average city. But there is no way for the game to actually figure out the exact number. It may also vary from time to time.",
	WORKLOAD: "Workload",
	WORKLOAD_DESC: "How busy your employees are. If workload is low, it means some of the workers have nothing to do and are wasting their time. If workload is 100%, your workers might have too much to do and the room might need to have more workers allocated.",
	SHIFT_START: "What time the work shift starts",
	SHIFT_NIGHT: "This room is employed all hours of the day.",
	WORKERS_INC: "Workers +{0}",
	WORKERS_DEC: "Workers -{0}",
	WORKERS_NONE: "Insufficient workers available. If there are idle subjects, these will soon sign up and start working",
	WORKERS_INSUFFICIENT: "Insufficient workers allocated.",
	MISSING_RESOURCE: "Missing:",
	WORKERS_INSPECT: "Inspect",
	AUTO: "Auto Employ",
	AUTO_DESC: "Let the AI adjust worker amount each day based on workload.",
},
view.sett.ui.room.ModuleIndustry: {
	Production: "Production",
	ProductionYear: "Produced this year",
	ProductionPrev: "Produced Previous Year",
	Consumption: "Consumption",
	ConsumptionYear: "Consumed this year",
	ConsumptionPrev: "Consumed Previous Year",
	Recipes: "Change Recipe",
	RecipesWarning: "Note that changing recipe will reset the room.",
	NoStorage: "No storage for produce is in the vicinity",
	RateDesc: "Every industry has a base rate. This is expressed in per worker per day. Degrade and room efficiency from furnishing is then applied along with technological bonuses. The actual produce depends greatly on proximity, layout, work skill and tools.",
},
view.sett.ui.room.ModuleInstance: {
	ACTIVATE: "Activate",
	DEACTIVATE: "Deactivate",
	UNREACHABLE: "Room is not reachable and will not work properly. Make sure there is a clear path to your throne.",
	DEACTIVATED: "Deactivated!",
},
view.sett.ui.room.ModuleRadius: {
	NAME: "Radius",
	PROBLEM: "No work is within the radius!",
	DESC: "Set the work radius of this room. Subjects will look for work within the radius. A big radius can be ineffective and workers will have a hard time getting back to services when work is done.",
},
view.sett.ui.room.ModuleService: {
	NO: "No Available Services",
	AVAILABLE: "Available Services",
	USED: "Currently Used",
	NEEDS: "Needs Work",
	TOTAL: "Total",
	QUALITY: "Quality",
	ACCESS: "The overall access of your minions",
	USAGE: "Service",
	Load: "Load",
	Capacity: "Capacity",
	CapacityD: "An rough estimate of how many subjects that can be served.",
	USAGE_DESC: "The highest load of this service during a day. Once full, it means there aren't enough services to meet your subjects demands. If low, it's an indication you can cut down on this service.",
	RADIUS: "Radius",
	RADIUSD: "All services operate within a radius. The radius is the max distance a subject is prepared to walk to get to a service.",
},
view.sett.ui.room.ModuleUpgradable: {
	UPGRADE_ALL: "Upgrade all",
	UPGRADE_ALL_DESC: "Upgrade all rooms once. Upgrading a room severely increases performance. It costs a lot of resources initially that will be deducted from warehouses, and also in maintenance.",
	UPGRADABLE: "Upgradable:",
	UPGRADE: "Upgrade",
	UPGRADE_MAX_REACHED: "Maximally Upgraded.",
},
view.sett.ui.room.UIPanelMain: {
	title: "workforce & rooms",
	Employable: "Employable",
	Odd-jobbers: "Odd-jobbers",
	OddjobbersD: "If your workforce is greater than what is needed, the surplus workers are odd-jobbers and will build and do odd jobs over your entire city map. If this number is negative you are missing workers to employ, and need to review your rooms. Ill employed rooms will function poorly.",
	prio: "Set the work priority of rooms.",
	prioraces: "Set the work priority of rooms according to species for citizens.",
	prioslaves: "Set the work priority of rooms for slaves.",
},
view.sett.ui.room.UIPanelWorkPrio: {
	Work Priorities: "Work Priorities",
},
view.sett.ui.room.UIPanelWorkPrioRace: {
	Work Priorities: "Work Priorities",
	Skill: "Skill",
	SortW: "Set all priorities based on work skill.",
	SortF: "Set all priorities based on fulfillment.",
	clear: "Set all priorities to default",
	Tool Settings: "Tool Settings",
},
view.sett.ui.room.UIRoom: {
	delete: "Are you sure you want to delete this room?",
	NoProblem: "Fully Operational",
	ActivateDesc: "Turn on/off activity for this room.",
	Refurnish: "Refurnish Room. WARNING: All room progress will be lost and all employees fired.",
},
view.sett.ui.room.UIRoomTable: {
	ReallyDelete: "Delete room?",
	DeleteRoom: "Delete Room",
	NrOfRooms: "Number of Rooms",
	Bulk: "Bulk",
	Showing: "Showing",
},
view.sett.ui.standing.CatAccess: {
	PreferedBy: "Preferred By:",
	Allowed: "Allowed to consume",
	AllowedNot: "Not allowed to consume",
	Yearly: "{0} per item per year, estimation: -{1} in total per year.",
	FurnitureD: "The amount allowed to furnish a subject's home. More allowed and available will increase happiness from furnishing.",
},
view.sett.ui.standing.CatOccupation: {
	WorkPrio: "Work Priorities",
	Educate: "Educate",
},
view.sett.ui.standing.CatPopulation: {
	age: "Age {0} to {1} : {2} Subjects",
	immi: "Aspiring Immigrants",
	Athorize: "Authorize",
	Auto: "Auto",
	AutoDesc: "Automatically authorize new immigrants up until this amount.",
	ageAverage: "Average Age:",
},
view.sett.ui.standing.CatReligion: {
	Burrial: "Burial",
	AllowRace: "Allow/deny access for Species",
	Allow: "Allow/deny access for whole class",
},
view.sett.ui.standing.CatServices: {
	Other: "Other Services",
	AllowRace: "Allow/deny access for Species",
	Allow: "Allow/deny access for whole class",
},
view.sett.ui.standing.StatRow: {
	Liked: "This is liked by your {0}. Higher value = more fulfillment.",
	Dislike: "This is disliked by your {0}. Higher value = less fulfillment.",
	DontCare: "Your {0} don't care about this and its value has no effect on fulfillment",
	ValueCurrent: "Current value: ",
	FulfillmentValue: "Current Fulfillment: ",
	HistoryValue: "History Value (days)",
	HistoryFulfillment: "History Fulfillment (days)",
},
view.sett.ui.standing.UICitizens: {
	all: "All",
},
view.sett.ui.standing.UiRaceInfo: {
	liking: "Liking",
	likingD: "Different species likes/dislikes different aspects of layout and management. Green bars indicate that the species likes the aspect, a red one represents dislike.",
	Likes: "This is liked by the race. Higher value = more fulfillment.",
	Dislikes: "This is disliked the race. Higher value = less fulfillment.",
	Mixed: "Different classes have mixed feelings about this.",
	DontCare: "This race doesn't care about this value.",
	ReligionD: "Inclination towards different religions.",
	PopulationD: "Determines a species population and location on the world map.",
},
view.sett.ui.subject.UISubject: {
	Care: "This subject cares for this.",
	CareNot: "This subject is indifferent to this.",
	Dislikes: "This subject dislikes this.",
	percPerDay: "Rate: {0}% / day",
	Age: "Age",
	offTime: "Leisure time.",
	freeDesc: "This subject has worked all work hours and is now enjoying some leisure time. Work hours reset every day at a certain time, either when the subject's place of employment shift start, or randomly if unemployed.",
	Occupation: "Occupation",
	Position: "Position",
	Height: "Height",
	Cubits: "Cubits",
	Weight: "Weight",
	Stones: "Stones",
	Nobleok: "Click to elevate this subject into a position of power",
	NobleNot: "Your status determines how many nobles you can elevate. To elevate more, you must increase your status level.",
	NobleAlready: "This subject is already a noble one.",
	Destination: "Destination",
	Favourite: "Favourite",
	FavoriteDesc: "Mark as favourite",
	encyclopedia: "encyclopedia",
	traits: "traits",
},
view.sett.ui.subject.UISubjects: {
	Sort: "Sort",
	Filter: "Filter",
	Showing: "Showing",
	Name: "Name",
	Occupation: "Occupation",
	None: "None",
	Favourites: "Favourites",
},
view.tool.PlacableMessages: {
	UNREACHABLE: "Must be placed on areas connected to the throne!",
	SOLID_BLOCK: "Must be placed on non-solid tiles",
	ROOM_BLOCK: "Must not be placed on room",
	ROOM_MUST: "Must be placed on room",
	MISC: "Blocked by something",
	STRUCTURE_BLOCK: "Blocked by structure. Dismantle it first",
	TERRAIN_NO_CLEAR: "Terrain can't be cleared",
	ROCK_MUST: "Must be placed on rock",
	TREE_MUST: "Must be placed on tree",
	WATER_MUST: "Must be placed on water",
	WATER_RETURN: "Water table is too low.",
	MOUNTAIN_MUST: "Must be placed on solid mountain",
	MOUNTAIN_NOT: "Can't be placed on mountains or caves. Use mountain specific tools for this.",
	ROCK_TREE_MUST: "Must be placed on rock or tree",
	STRUCTURE_CLEAR: "Must be placed on structures. Walls, ceilings, fortifications or roads.",
	ROAD_ALREADY: "Road already exists there",
	CAVE_WALL_ROUGH: "Must be placed next to a rough cave wall",
	JOB_BLOCK: "Blocked by other job",
	JOB_MUST: "Must be placed on jobs",
	BROKEN_MUST: "Must be placed on broken walls or rooms",
	CAVE_MUST: "Must be placed on a cave",
	AREA_CONNECTED_MUST: "Area must be connected",
	INDOOR_MUST: "Must be placed indoors (under roof)",
	OUTSI2DE_MUST: "Must be placed outside and not on top of structures",
	FERTILITY_MUST: "Must be placed on land that has fertility over 0%",
	MAX_REACHED: "Max reached",
	MAX_SIZE_REACHED: "Max size reached",
	MAX_DIMENSION_REACHED: "Max dimension reached",
	ENTITY_BLOCK: "Blocked by entity",
	TERRAIN_BLOCK: "Blocked by terrain",
	NOT_EDIBLE: "Must be placed on edible vegetation",
	NOT_RIPE: "Edible vegetation must be ripe (Summer and autumn)",
	NO_JOBS: "No jobs in the vicinity",
	IN_MAP: "Must be placed within map",
	BLOCKED_BY_WATER: "Blocked by water",
	ONE_CLEAR_TILE: "Needs at least 1 unblocked tile.",
	SAME_REGION: "Needs to be in the same region.",
	REGION: "Must be placed in a region",
	BLOCKED: "blocked",
	BLOCK_WILL: "Will block other tile",
	BLOCKED_WILL: "Will be blocked by other tile",
	ROOM_OR_STRUCTURE_MUST: "Must be placed on rooms or structures",
	ITEM_MUST: "Must be placed on items",
	ITEM_BLOCKED: "Blocked by other item",
	AREA_MUST: "Must be within the marked area",
},
view.tool.PlacableMultiTool: {
	type: "type",
},
view.tool.PLACER_TYPE: {
	rectangle: "rectangle",
	brush: "brush",
	line: "line",
	ellipse: "ellipse",
	hollow rectangle: "hollow rectangle",
	fill: "fill",
},
view.tool.ToolPlacer: {
	Close: "Close",
},
view.ui.profile.Level: {
	Title: "{0} {1} of {2}",
},
view.ui.profile.Titles: {
	spent: "Chosen",
	NotAchiving: "Titles can not be unlocked",
	spentD: "Whenever you start a new game, you get to choose 5 unlocked titles.",
	Locked: "Title is currently unavailable",
	Active: "Title is currently unlocked and active",
	Unlocked: "Title is currently unlocked. You can select it when starting a new game.",
},
view.ui.profile.UIProfile: {
	Name: "Status",
	Desc: "A number of settings and information regarding your faction and profile.",
	Visuals: "Visuals",
},
view.ui.profile.Visual: {
	Save-Profile: "Save as Default",
	Load-Profile: "Load as Default",
	fname: "Faction Name",
	rname: "Ruler Name",
	flag: "flag",
	background: "background",
	foreground: "foreground",
	border: "border",
	pole: "pole",
},
view.ui.tech.Node: {
	Relock: "Hold {0} and click to disable this technology. {1} Knowledge will be added to your frozen pool.",
},
view.ui.tech.Prompt: {
	Unlock: "Do you wish to allocate {0} knowledge and unlock the following: ",
	Forget: "Do you wish to forget the following technologies:",
},
view.ui.UIGoods: {
	Name: "Goods",
	Desc: "Goods and Trade",
},
view.ui.UIGoodsTrade: {
	clickForInfo: "Click for info",
	ExportLevelDesc: "How much of your warehouse stock that will be exported to buying factions. Wares must first be moved to an Export Depot, where they will eventually be sold to the highest bidder.",
	ExportEverything: "Export everything, even resources not in warehouses.",
	ExportNothing: "Export nothing.",
	ExportLevelCurrent: "Export {0}% of warehouse stock (when above {1} items). Current stock is {2} items. You will currently sell {3} items.",
	ExportProblem: "You don't have any export depots set to this resource. No exporting can be done.",
	ImportLevelDesc: "How much that will be imported based on your warehouse stock. Wares will be delivered to import depots from selling factions, which might take time. If you are short on money, or lacking depot space, nothing will be imported.",
	ImportEverything: "Always import, as long as there is depot space.",
	ImportNothing: "Never import.",
	ImportLevelCurrent: "Import to keep warehouse stock at {0}% ({1} items). Current stock is {2} items. You will currently import {3} items.",
	ImportProblem: "You don't have any import depots set to this resource. No importing can be done.",
},
view.ui.UIGoodsTradeSpecial: {
	Title: "Special Orders",
	Desc: "Make a custom order. A custom import does not need import depots, goods will be delivered to the throne if missing.",
	Cheapest: "Cheapest",
	Closest: "Closest",
},
view.ui.UINotifications: {
	Homeless: "Homeless",
	HomelessD: "People that have searched for homes, but have found none. Build more housing nearby.",
	wrongful: "Wrongful Deaths",
	Room: "Constructed Rooms",
	RoomBroken: "Broken Rooms",
},
view.world.generator.GeneratorUI: {
	DepositD: "An very rough estimate of how much deposits there will be in this location.",
	PopulationD: "The percentage indicates how each species will thrive in the selected climate. Next to it is the regional population. Different species have different skills that can lead to taxes. It's easier to rule a region that has the same species makeup as your city.",
},
view.world.generator.Interer: {
	YouSure: "You may still pick some unlocked titles. Start anyway?",
},
view.world.generator.Titles: {
	spent: "Pick 5 unlocked titles to boost your name.",
},
view.world.generator.WorldViewGenerator: {
	Settlement: "Settlement",
	place: "Place Capitol",
	Regenerate: "Regenerate",
	settle: "settle",
	seed: "Random Seed",
	seedgenerate: "Generate based on seed.",
},
view.world.ui.army.UIArmy: {
	ConsumtionRate: "Yearly Consumption:",
	ConsumtionPerMan: "(-{0} per soldier)",
	MoraleDesc: "Morale is gained by keeping the army well supplied. the morale affects your army's performance on the battlefield.",
	HealthDesc: "Health is gained by keeping the army well supplied. Poor health will lead to desertion.",
	mercenaryD: "Hiring Mercenaries is instant and they equip, feed and replenish themselves. They cost credits to hire and requires credits in upkeep.",
	disbandD: "Disband entire army. (All divisions must first be disbanded)",
	CreditsD: "The amount of money needed to upkeep this army daily.",
	disbandDivD: "Disband selected divisions",
	MoveD: "Move this division to another army. The other army must be within 3 tiles.",
},
view.world.ui.army.UIArmyRecruit: {
	NoMapnpower: "Insufficient Manpower!",
	Note: "NOTE: once a division has finished training, it will need to be supplied from your army supply depot. Without supplies, the men will desert you.",
},
view.world.ui.factions.UIFactionDetail: {
	Subjects: "Subjects",
	Citizens: "Citizens",
	Area: "Area",
	Credits: "Credits",
	BNP: "BNP",
	Index: "Index",
	Reachable: "Reachable",
},
view.world.ui.factions.UIFactionDetailMarket: {
	sell: "sell",
	buy: "buy",
	stored: "stored",
},
view.world.ui.factions.UIFactionList: {
	reachable: "This realm is reachable and can be traded with.",
	unreachable: "This realm is too distant to interact with.",
	Population: "Population",
	filter name: "filter name",
	Factions: "Factions",
},
view.world.ui.regions.ToolAttack: {
	noSoldiers: "Region has no soldiers to attack with.",
	noRange: "Too far away to attack.",
},
view.world.ui.regions.UIRegion: {
	Allocated: "Allocated Points",
	cost: "Administration points cost:",
},
view.world.ui.regions.UIRegionList: {
	search: "search",
	Regions: "Regions",
},
view.world.WorldViewPanel: {
	Factions: "Factions",
	go to capitol: "go to capitol",
	developer tools: "developer tools",
},
world.ai.War: {
	mess: "We, the people of {0} offer to lay down our arms and surrender. Make of us a subject and we shall pay you annually a hefty sum. Do you accept?",
},
world.army.WArmyUpdater: {
	Starving: "Supplies low!",
	StarvingD: "Essential supplies have not been delivered to our army, affecting health and morale. Low health will stop training of new recruits and cause deaths and desertion. Low morale will affect your troops performance on the battlefield.  Fill up our military depots and fortify the army immediately. Affected army: {0}",
	Desertion: "Desertion!",
	DesertionD: "Army supplies are low, and as a result {0} soldiers have deserted from {1}.",
},
world.army.WDivMercenaries: {
	mTitle: "Mercenaries leaving!",
	mBody: "Since you don't have enough credits to pay them, your conscripted mercenaries are leaving you.",
},
world.map.buildings.BuildingFarm: {
	name: "Farm",
},
world.map.buildings.BuildingVillage: {
	name: "Village",
},
world.map.buildings.camp.Checker: {
	titleJoin: "Haven joins your cause.",
	bodyJoin: "{0}, a haven of {1} {2} have agreed to join your cause. They will now start immigrating to your capitol at a steady pace. Make sure you allow them in.",
	titleLeave: "Haven quits corporation!.",
	bodyLeave: "Since you've failed to uphold the standards of the haven: {0}, it has now stopped supporting you, and its {1} members will start to return home.",
},
world.map.buildings.camp.WorldCamp: {
	unlockableD: "A neutral {0} heaven. If certain requirements are met, and you control the region in which it resides, its population will join your cause. The requirements increase with size, and with the amount of havens that have joined you.",
	lockedD: "A {0} heaven that is aligned with another faction.",
	unlocked: "A {0} heaven that is aligned to your cause. It will steadily increase your {1} immigration pool.",
	Haven: "Haven",
	HavenD: "Havens are smaller settlements that contain individuals of a specific race. They are independent, but can join a faction if their criteria are met and the faction controls the region in which they are located.",
},
world.map.regions.Generator: {
	generating: "Generating Regions",
},
world.map.regions.RegionCivics: {
	Knowledge: "Knowledge",
	KnowledgeD: "The amount of knowledge this region stores that can be used in unlocking technology.",
	Health: "Health",
	HealthD: "Having your peoples in good health decreases the chances of disease",
	Infrastructure: "Infrastructure",
	InfrastructureD: "Infrastructure improves living conditions for all and thus increases maximum carrying capacity of the region. It also increases production",
	Law: "Law",
	LawD: "Law increases loyalty significantly, but decreases production slightly.",
	Sanitation: "Sanitation",
	SanitationD: "Sanitation decreases chances of epidemics and increases growth.",
	Entertainment: "Entertainment",
	EntertainmentD: "Entertainment increases happiness, but decreases industry output slightly.",
	Education: "Education",
	EducationD: "Education contributes to your knowledge points and makes subjects more productive, while decreasing growth slightly.",
},
world.map.regions.RegionInit: {
	PopulationGrowth: "Population Growth",
	PopulationGrowthDesc: "Affects how fast your subjects grow in numbers.",
	Loyalty: "Loyalty",
	LoyaltyD: "Loyalty decreases the chances of uprisings",
	Production: "Production",
	ProductionD: "Increases production of all regional industries",
	Soldiers: "Soldiers",
	SoldierD: "Increases the amount of soldiers",
},
world.map.regions.RegionOwner: {
	Loyalty: "Loyalty",
	LoyaltyD: "Current loyalty overall",
	Loyalty-Target: "Loyalty-Target",
	LoyaltyTargetD: "Target loyalty overall",
	Order: "Order",
	Low order increases the chances of Rebellion: "Low order increases the chances of Rebellion",
	Distance: "Distance",
	DistanceD: "Distance Penalty to capitol",
	AdminPoints: "Admin points",
	AdminPointsD: "Allocated Admin points",
	AdminPenalty: "Admin Penalty",
	AdminPenaltyD: "Penalties for admin are added based on region capacity and distance to the capitol, as well as the amount of previously allocated points.",
	Deficiency: "Deficiency",
	DeficiencyD: "More Administration points are allocated than you can support. All allocations will work with less efficiency",
	Realm: "Realm",
	RealmD: "The realm this region belongs to.",
	Rebel: "Rebel",
	RebelD: "A region that is rebelling towards its master. Rebel regions doesn't count towards your stats, and will control themselves. Allies won't attack rebel regions, although they will attack their armies. A rebel region can be recaptured. One can also declare its independence.",
	Capitol: "Capitol",
	CapitolD: "Indicated that this is the capitol region, where the capitol of a faction resides.",
},
world.map.regions.RegionPopulation: {
	Population: "Population",
	PopulationTotal: "Total Population",
	Capacity: "Capacity",
	CapacityD: "the total subject capacity.",
	Base: "Capacity Base",
	BaseD: "The base of the total subject capacity. Determined by size and fertility.",
},
world.map.regions.RegionRace: {
	Population: "Population",
	PopulationD: "Current population per race.",
	Loyalty: "Loyalty",
	LoyaltyD: "Current Loyalty. Loyalty determines the chance of rebellion. Loyalty changes slowly based on the target. Increase loyalty by allocating admin points into loyalty boosting areas. Loyalty will also increase the longer a region has belonged to you. Loyalty is species specific.",
	Prosecute: "Prosecution",
	ProsecuteD: "Prosecuting a species, severely diminishes growth and decreases happiness.",
	Exile: "Exile",
	ExileD: "Forbid this species from immigrating and sends off any citizens to neighbouring regions where they are still welcome.",
	Massacre: "Massacre",
	MassacreD: "Commit genocide and instantly rid yourself of this species. Will cause an outrage of course, make sure you have enough military presence to handle an eventual uprising.",
	Elevate: "Elevation",
	ElevateD: "Some special treatment for a species increases growth and happiness.",
	Biome: "Species Biome",
	BiomeD: "The mix of climate and terrain of this region. Different species are better suited for different biomes",
	Crowding: "Crowding",
	CrowdingD: "As land is settled and it becomes more crowded, growth slows down.",
	Distant: "Distant {0}",
	Base: "Base",
},
world.map.regions.RegionTaxes: {
	Prospect: "Prospect",
	ProspectD: "Prospects determine the potential output of this industry. It varies from region to region. The final output is your population multiplied by population and admin. Racial bonuses are also applied.",
	Exhaust: "Exhaust",
	ExhaustD: "If an industry is set to exhaust, its output is doubled. Industries can be exhausted for maximum a year and after, they will not produce any resources for four times the time they were exhausted.",
	Exhausted: "Exhausted",
	ExhaustedD: "Exhausted Industries will not produce anything until they've had time to recover. A fully exhausted resource needs a full year to recover.",
},
world.overlay.OverlayLandmark: {
	name: "Landmarks",
	desc: "show region borders",
},
world.overlay.OverlayRegion: {
	name: "Regions",
	desc: "show region borders",
},
world.WorldMinimap: {
	painting: "Painting world minimap",
},
menu.GUI: {
	back: "< back",
},
menu.Intro: {
	greeting: "HAIL MIGHTY DESPOT!",
	1: "This is a EA and not a complete game, nor a complete demo.",
	2: "That means a lot of visual placeholders and unfinished, missing or broken features",
	3: "Feedback is much welcome!",
},
menu.Loader: {
	notLoaded: "Game could not be loaded!",
},
menu.Menu: {
	loading: "loading...",
},
menu.ScCampaign: {
	name: "campaigns",
},
menu.ScCredits: {
	name: "credits",
},
menu.ScExamples: {
	name: "examples",
	load: "load",
},
menu.ScHallFame: {
	name: "hall of fame",
	nobility: "nobility",
	knights: "knights",
	citizens: "citizens",
},
menu.ScHallHeroes: {
	name: "hall of heroes",
},
menu.ScHallLegends: {
	name: "hall of legends",
},
menu.ScLoad: {
	name: "load",
	delete: "Delete Save?",
},
menu.ScMain: {
	play: "play",
	continue: "continue",
	settings: "settings",
	credits: "credits",
	quit: "quit",
	tutorial: "tutorial",
},
menu.ScOptions: {
	name: "settings",
	revert: "revert",
	default: "restore",
},
menu.ScRandom: {
	name: "random game",
	go!: "go!",
	map: "map",
},
menu.screens.Screener: {
	back: "< back",
},
